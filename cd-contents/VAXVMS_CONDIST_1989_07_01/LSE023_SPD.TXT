
PRODUCT NAME:  VAX Language-Sensitive Editor, Version 2.3       SPD 26.59.09
                                              
DESCRIPTION

The  VAX  Language-Sensitive  Editor  is  a  multi-language,  multi-window,
screen-oriented editor specifically  designed  for  program development and
maintenance.  The Editor  is  ``language-sensitive''  in  that  it provides
users with VAX language-specific information.    This  information  enables
both new and experienced programmers to develop programs faster, with fewer
errors,  through  VAX  language-specific  construct  completion, and  error
detection and correction facilities.

The  VAX    Language-Sensitive  Editor  supports  the  DECwindows  software   
environment, and provides  either a DECwindows or a character cell terminal   
interface.  The VAX  Language-Sensitive  Editor  is  included in the VAXset   
Software  Engineering  Package  (SPD  27.07.xx).    This  package  provides   
simplified ordering and maintenance of various tools.  See SPD 27.07.xx for   
more information on VAXset.                                                   
                                                                              
 
The  VAX  Language-Sensitive  Editor  works  in  concert with supported VAX
languages  and  the  VAX Symbolic Debugger to provide a highly interactive,
on-line environment that  facilitates the EDIT-COMPILE-DEBUG portion of the
program development cycle.   Within  a  single  editing  session, users can
write  code,  edit,  compile,  review   compile-time  errors,  and  correct
compile-time errors.  The Editor can  be  invoked  directly  from  the  VAX
Symbolic Debugger to correct source code errors  found  during  a debugging
session.

Users  can customize the environment by tailoring and  expanding  upon  the
features  and  structures  provided  by  the VAX Language-Sensitive Editor.
User-defined environments can be saved for future use.

``Language-Sensitive'' Features

For each supported VAX language, the VAX Language-Sensitive Editor provides
a  set  of  source code templates.  These templates are formatted  language
constructs that provide keywords, punctuation, and placeholders.  Templates
are inserted into the editing buffer by successive expansions of tokens and
placeholders.  Placeholders represent positions in  the  source  code where
the  user must provide additional program text  or  choose  from  indicated
syntactic options.  Tokens are keywords, or function  names,  that the user
can  type  into  the  editing  buffer  and  expand  into    templates   for
corresponding source constructs.

VAX  language-specific  on-line  help  for  placeholders  and  key language
concepts is accessible from the Editor.

Integration with VAX Source Code Analyzer                                      

The VAX Language-Sensitive Editor is tightly integrated with the VAX Source
Code Analyzer (SPD  27.63.xx)  to provide the user with interactive source
code cross-reference, navigation, and static analysis for an entire system.
The editor can display the source code for the declaration of a variable or
procedure, or step through the references  with  the  editor  bringing  the
appropriate files into editing buffers.  All  the  capabilities  of the VAX
Source Code Analyzer are available from within the editor, including static
analysis. 

VAX Language Interfaces

The VAX Language-Sensitive Editor interfaces to supported VAX languages  to
provide  the    capability    for  on-line,  interactive  program  editing,
compilation,  compile  time    error  reporting,  and  compile  time  error
correction  within a single  editing  session.    Supported  VAX  languages
provide a /DIAGNOSTICS qualifier that  instructs the compiler to generate a
file of compile-time diagnostic information.   This  file  is  used  by the
Editor in compilation error review mode. 

User Diagnostic File Interface

The  VAX  Language-Sensitive  Editor has an ASCII  format  diagnostic  file
interface to be used with compilers and tools  other than those supplied by
DIGITAL.    The  file  is used to communicate diagnostic  messages  to  the
Language-Sensitive  Editor  and  allows  the user to display the diagnostic
messages  in the REVIEW buffer and issue a GOTO SOURCE command  to  display
the corresponding source in another window. 

The  ASCII  format  of  this  file provides an easy to use Digital  Command
Language (DCL) style interface. 

Features Include:

-  COMPILE command to perform  compilations  without leaving the Editor,
   and,  optionally,  to  review  compilation    errors    upon  compile
   completion.  The user may specify  DCL  qualifiers such as /DEBUG and
   /LIBRARY when invoking the compiler from the  VAX  Language-Sensitive
   Editor.  The compilation may be performed in a BATCH job.

-  REVIEW  mode  to  review compilation errors upon compile  completion.
   The  VAX Language-Sensitive Editor displays the compilation errors in
   one window, with the corresponding source code displayed in a  second
   window.   For easy error correction, there is GOTO SOURCE command  to
   position  the  cursor  at  the  point  in  the  source code where the
   compiler detected the error.

VAX DEC/CMS (Code Management System) Interface                                

The VAX  Language-Sensitive Editor provides an interface to the VAX DEC/CMS
(Code Management System  (SPD  25.52.xx)  at  a  minimum of Version 2.3) to
simplify program development and  source  file  management.    All  DEC/CMS
functions are available from within the editor. 
                                                                              
DEC/CMS can be utilized to  store program source files.  These files can be
moved from the CMS library, placed in the current editing buffer, modified,
and returned to the CMS library without leaving the editor. 

VAX Symbolic Debugger Interface

The  VAX Language-Sensitive Editor can be invoked  from  the  VAX  Symbolic
Debugger providing the ability to make source code  corrections as they are
found during a debugging session.

Features include:

-  User notification if the file, invoked by the editor,  is a different
   version than that displayed in the VAX Symbolic Debugger

-  Ability to specify the file and line number from which  to  start the
   editing  session  with the default being the current source displayed
   in the VAX Symbolic Debugger

-  User choice of terminating activity directly from the editing session
   or returning to the debugging session

User Interface

The  VAX  Language-Sensitive  Editor  offers an easy-to-use, flexible  user
interface designed to meet varying user needs.

Features include:

-  Default KED/EDT keypad layout

-  Alternate VAXTPU EVE keypad layout                                          

-  Multiple windows, multiple buffers

-  Choice of editing mode: OVERSTRIKE or INSERT

-  Ability to bind  any  command  (user-defined or those supplied by the
   VAX  Language-Sensitive  Editor),  or    sequence  of  keystrokes  (a
   ``learn'' sequence) to a key.

-  On-line HELP facility for the VAX Language-Sensitive Editor

-  Interface to VAX DEC/CMS.  The editor can use VAX DEC/CMS protocol to
   access files stored in the current CMS library.

-  Source  File Management features include defining  a  searchlist  for
   locating source files and marking source directories  as read-only to
   prevent accidental modifications.

User-Tailorable Features

VAX  Language-Sensitive Editor users can tailor the editing environment  to
address  unique  programming needs.  These user-defined environments can be
saved for future editing sessions.

Users can provide a definition of a language, memo header, or other textual
templates for the  Editor.    To address specific coding conventions, users
can add to or change the definitions supplied for the supported languages.

VAXTPU (Text Processing Utility)

For more unique editing  requirements,  the  VAX  Language-Sensitive Editor
provides commands to access VAXTPU, a text processing utility which is part
of the VMS and MicroVMS Operating  Systems.    VAXTPU  has  an easy-to-use,
high-level  procedural  language  which  allows  users to  write  functions
incremental to those provided by the VAX Language-Sensitive  Editor.    The
VAXTPU  language  provides for looping and conditionals to allow  users  to
perform more powerful editing tasks.

VAXTPU Language Statements Include:

^  The assignment statement
^  Procedural statements (PROCEDURE - ENDPROCEDURE)
^  Looping statements (LOOP - ENDLOOP)
^  Conditional statements (IF - THEN - ELSE - ENDIF)
^  Case statements (CASE - ENDCASE)
^  Error statements (ON_ERROR - ENDON_ERROR)

VAX Language-Sensitive Editor Commands

Users  control  the  editing environment and tap the VAX Language-Sensitive
Editor's knowledge of VAX languages with a rich set of commands.   Commands
used most often can be easily bound to keys to enable quick  and  efficient
programming.  All commands are available through ``command mode''.

Command Features Include:

-  EXPAND/UNEXPAND,  ERASE/UNERASE  PLACEHOLDER,  commands  for language
   construct completion
									
-  CHANGE WINDOW_MODE, NEXT/PREVIOUS WINDOW, SET SCREEN, SHIFT, REFRESH ONE
   WINDOW, TWO WINDOWS, OTHER WINDOW, SPLIT WINDOW, ENLARGE WINDOW,  SHRINK
   WINDOW, DELETE  WINDOW  screen manipulation commands
								        
-  COMPILE command to invoke the appropriate VAX language compiler

-  REVIEW, END REVIEW,  NEXT ERROR, PREVIOUS ERROR, GOTO SOURCE commands
   for compile-time error review and correction

-  DEFINE/DELETE  [LANGUAGE, TOKEN, PLACEHOLDER,  ALIAS,  COMMAND,  KEY,
   PACKAGE,  PARAMETER,  ROUTINE], EXTRACT, MODIFY  LANGUAGE,  SET  MODE
   commands for tailoring the user environment

-  SAVE    ENVIRONMENT   command  for  writing  user-defined    language
   environment to a file for future editing session use

-  SAVE SECTION command for writing user-defined editing  environment to
   a file for future editing session use                                       

-  DO command to execute an Editor command (or  string  of  commands) or
   VAXTPU program statements

-  CALL command for calling a VAXTPU procedure

-  SPAWN  and  ATTACH  commands  for  suspending the editing session  to
   switch to a subprocess running the DCL command interpreter

-  GOTO command to position the cursor at the indicated option  (options
   include BOTTOM, TOP, BUFFER, FILE, MARK, PAGE, LINE, WORD, CHARACTER,
   PLACEHOLDER,  SCREEN)  as  well  as  CANCEL  MARK,  CHANGE  DIRECTION
   commands for cursor positioning

-  SEARCH command for locating specified characters or strings (includes
   wildcard option)

-  SUBSTITUTE command for replacing the text of one string with another

-  SHOW command  to display characteristics and settings of several options  
   (including ALIAS, BUFFER, COMMAND, DIRECTORY, KEY, LANGUAGE, MARK, MODE,  
   PACKAGE,    PARAMETER,    PLACEHOLDER,    ROUTINE,    SCREEN,    SEARCH,  
   SOURCE_DIRECTORY, TOKEN, VERSION)                                         

-  Text manipulation  commands include CANCEL SELECT_MARK, CAPITALIZE WORD,  
   CHANGE [CASE,DIRECTION,INDENTATION,TEXT_ENTRY_MODE], CUT,  ENTER  [LINE,  
   SPACE, SPECIAL, TAB, TEXT],  ERASE [CHARACTER, LINE, PLACEHOLDER, WORD],  
   FILL, LOWERCASE WORD, PASTE, SET  [FORWARD, INSERT, OVERSTRIKE, REVERSE,  
   SELECT_MARK, WRAP, LEFT_MARGIN, RIGHT_MARGIN], SUBSTITUTE, TAB,  UNERASE  
   SELECTION, UNEXPAND, UNTAB, UPPERCASE WORD.                               

-  CHANGE INDENTATION,  ENTER  TAB,  SET INDENTATION, SET TAB_INCREMENT,
   TAB, UNTAB commands for source code indentation control

-  DELETE    BUFFER,    SET   [MODIFY,  NOMODIFY,  DIRECTORY,  OUTPUT_FILE,  
   SOURCE_DIRECTORY],  WRITE,  RESERVE,  UNRESERVE,  REPLACE,  CLOSE, READ,  
   INCLUDE  commands  for  manipulation  of  files,  editing  buffers,  and  
   interfacing to DEC/CMS                                                    

-  CHECK LANGUAGE command which finds  likely  errors  in  user  created
   language definitions.

-  FILL and ALIGN commands for source code comment formatting


-  All DEC/CMS commands  

HARDWARE REQUIREMENTS

VAX, MicroVAX,  or  VAXstation  configuration  as  specified  in the System
Support Addendum (SSA 26.59.09-x).

SOFTWARE REQUIREMENTS*                                                   

For systems using terminals:  (No DECwindows interface)

VMS Operating System

For workstations running VWS:

VMS Operating System      
VMS Workstation Software  

For workstations running DECwindows:

VMS Operating System  (and necessary components of VMS DECwindows)

This product may run in either of the following ways:

^  Stand-alone execution  - Running the X11 display server and the client
   application on the same machine.

^  Remote execution - Running  the  X11  display  server  and  the client
   application on different machines.

VMS DECwindows is part  of  the  VMS Operating System but must be installed
separately.  Installation of VMS DECwindows gives you the option to install
any or all of the following three components:

^  VMS DECwindows Base kit (runtime support)
^  VMS DECwindows Compute Server (Base kit; provides
			      runtime support)
^  VMS DECwindows Device support
^  VMS DECwindows Programming Support

For  stand-alone  execution, the following DECwindows  components  must  be
installed on the machine:

^  VMS DECwindows Base kit (runtime support)

For remote execution, the following DECwindows components must be installed
on the machines:

Server Machine			Client Machine

VMS DECwindows Base kit		VMS DECwindows Base kit
  (runtime support)  		   (runtime support)

Note: For full use  of the VAX Language-Sensitive Editor features described
      in this SPD, at least one of the VAX languages in List 1 or List 2 is
      required.  

Note: Certain  features  of  this product  are  not  available  when  using
      language pre-processors such as those supplied  for  VAX  Rdb/VMS and
      VAX DBMS.  Consult your local DIGITAL representative  for  additional
      information.

                               List 1

The following list specifies VAX languages which are fully supported by the
VAX  Language-Sensitive Editor.  Templates for those languages are included
with the VAX Language-Sensitive Editor.

      VAX Ada
      VAX BASIC
      VAX BLISS-32
      VAX C 
      VAX COBOL 
      VAX FORTRAN
      VAX PASCAL 
      VAX PL/I 
      VAX MACRO
 
                               List 2

The following list specifies VAX languages which are fully supported by the
VAX Language-Sensitive Editor.   Templates for these languages are included
with the product and not the VAX Language-Sensitive Editor.

      VAX DIBOL
      VAXELN PASCAL
      VAX SCAN
      VAX CDD
      VAX DOCUMENT


                              List 3

The following list specifies  VAX  products  which have partial support for
the VAX Language-Sensitive Editor (Refer  to product SPD for more details).
Templates for these products are included  with the product and not the VAX
Language-Sensitive Editor. 

      VAX ACMS
      VAX DATATRIEVE
      DECwindows UIL                                                    
      VAX TDMS

*Refer to the System Support Addendum for availability and required versions
 of prerequisite/optional software (SSA 26.59.xx) and for information regarding
 components of VMS DECwindows.

ORDERING INFORMATION

Software Licenses:  QL-057A*-**
Software Media: QA-057A*-**
Software Documentation:  QA-057AA-GZ
Software Product Services:  QT-057A*-**

*Denotes variant fields.  For additional information on available licenses,
 services and media, refer to the appropriate price book.


SOFTWARE LICENSING 

This software  is  furnished  under  the  licensing provisions of DIGITAL's
Standard Terms and  Conditions.    For  more  information  about  DIGITAL's
licensing terms and policies, contact your local DIGITAL office. 

License Management Facility Support

This product supports the License Management Facility.

License units for this  product are allocated on a CPU-capacity basis.  

For more information on the License  Management  Facility,  refer  to  the  
VMS Operating System Software Product Description (SPD 25.01.xx) or the 
License Management Facility manual of the VMS Operating System documentation 
set.

For more information about DIGITAL's licensing terms  and policies, contact
your local DIGITAL office.

SOFTWARE PRODUCT SERVICES 

A  variety  of  service  options  are available from  DIGITAL.    For  more
information contact your local DIGITAL office. 

SOFTWARE WARRANTY

Warranty for this software product is provided by DIGITAL with the purchase
of a license for the product as defined in the  Software  Warranty Addendum
of this SPD. 

