
PRODUCT NAME:  VAX C, Version 3.0                            SPD 25.38.15
                                                        	
DESCRIPTION

VAX C is an extended implementation of the C programming language originally
developed at Bell Laboratories.  The VAX C compiler runs under the VMS
Operating System and generates optimized and position-independent code. 
                                                                           
As a native-mode VAX language, VAX C is integrated into the VAX common
language environment. All VAX system services are thus available to programs
written in VAX C.  VAX C supports VAX Record Management Services (RMS),
including sequential, relative, and indexed file organizations and associated
access methods, in addition to the stream file-access conventional among most
C implementations. VAX C programs can invoke, as functions, modules written
in other VAX languages. 
                                                                             
VAX C provides assistance in decomposing for loops.  Decomposed loops run in
parallel in multiple processes, reducing the total elapsed time required to
run the program.  This capability is most useful on multiple processor
machines, such as the VAX 8800. 

VAX C supports the lint-like features of the VAX Source Code Analyzer (SPD
27.63.xx)  which is used in conjunction with the VAX Language-Sensitive
Editor (SPD 26.59.xx).  The combination of using function prototypes and VAX
Source Code Analyzer allows the programmer to check for consistent function
usage throughout a program environment.  VAX C also generates complete debug
and traceback records for use with the VAX Symbolic Debugger.  The Debugger
allows the C programmer to set breakpoints, examine and modify the contents
of user variables, and selectively halt or continue program execution. 

Features

^  Compiler-assisted decomposition of for loops to run in parallel in 
   multiple processes.

^  Function prototypes for declaring and checking function argument count and
   types      

^  Structured programming control flow constructs

   -  if...else construct for simple selection
   -  switch statement for multi-choice selection with an arbitrary number of 
      case statements
   -  while, do, and for statements for iterative execution

^  Flow modification statements

   -  break
   -  continue
   -  goto

^  Data types for numeric, nonnumeric, and systems programming

   -  Byte, word, and longword signed and unsigned integers
   -  Integer constants in decimal, octal, and hexadecimal radices
   -  Void data type						   
   -  Single-character variables and constants
   -  Single, double-precision and G_floating point numbers            
   -  Pointer variables containing the addresses of other variables
   -  Data aggregates including arrays, structures, and unions  referencing
      allowed                                                

^  Storage allocation using                                              

   - Auto, static, register, and external storage allocation classes for 
     variables                                                      
                                                                              
   - Keywords (globalref, globaldef, and globalvalue) for sharing data among 
     program modules                                         
                                                                              
   - Keywords (readonly, noshare, and psect name specification) for control 
     of data attributes and data placement                  

   - Keywords (const and volatile) for specifying attributes for storage in 
     which objects are placed 

   - Keyword (_align) for specifying the alignment boundaries of data objects

^  Large set of concise arithmetic, relational, and logical operators

^  Preprocessor control statements for:

   -  File inclusion
   -  Identifier substitution
   -  Conditional compilation
   -  Pragmas to control compiler options                                    
   -  Pragmas to support compile-assisted decomposition.                     

^  Separate compilation capabilities
                                                                              
^  Compiler generated listing file including optional:

   -  In-line machine code
   -  Expanded preprocessor substitution listing
   -  Storage allocation map
   -  Cross referencing of variables
   -  Compilation statistics
   -  Loop decomposition report                                              

^  Access to VAX machine instructions from C source code

^  Integration into the VAX Common Languages Environment:

   - Generation of complete debug and traceback records for VAX Symbolic 
     Debugger support

   - Facility for interfacing with the VAX calling standard

   - Access to the VAX Common Run-time Library for general purpose routines 
     and support of multi-language environments

   - Access to the data management facilities of VAX Record Management 
     Services (RMS) via direct calls to the Common Run-time Library

   - Access to data structures declared using the VAX Common Data Dictionary 
     (VAX CDD)                                                

   - Interface to the VAX Language-Sensitive Editor. Source programs can be 
     written and compiled using the VAX Language-Sensitive Editor which has 
     built-in intelligence about the source format of C programs.       

   - Interface to VAX Source Code Analyzer to generate static analysis data

   - Interface to VAX DEC/Shell as an alternate command line interpreter 
     under which the VAX C compiler and user programs may be run.        

^  Extensive global and local optimizations of generated code for increased
   performance and reduced size under VMS.

^  Interface to the curses screen manipulation package                  

Compatibility With Other C Implementations

VAX C represents a more current definition and implementation of the language
than is described in the initial guiding document for C, The C Programming
Language*.  Some incompatibilities among implementations do, however, exist. 
In general, many programs written in C for other compilers can be
successfully recompiled under VAX C. 

The C language has been closely associated with the UNIX(r) Operating System
which itself was largely written in C.  Over 150 UNIX-specific routines have
thus been included in the run-time library available with the VAX C compiler.
Routines selected for inclusion in this library are primarily those for which 
a reasonable emulation is possible under VMS. Inherent architectural
differences between UNIX and VMS necessarily preclude the likelihood of every
C program written for a UNIX environment compiling and executing unaltered.
Programs exploiting highly machine-dependent or UNIX-specific features will
require some conversion effort. 

* Brian Kernighan and Dennis M. Ritchie, Prentiss-Hall, 1978

Run-Time Package For C Applications

The VAX C Run-Time Package is distributed with the VMS Operating System. The
VAX C Run-Time Package provides shareable routines to perform input/output,
character and string handling, mathematical computations, memory allocations
and emulation of selected UNIX features. 

HARDWARE REQUIREMENTS

VAX, MicroVAX, or VAXstation configuration as specified in the System Support
Addendum (SSA 25.38.15-x). 

SOFTWARE REQUIREMENTS*

VMS Operating System                                                        
                                                                            
VMS Workstation Software                                                  

* Refer to the System Support Addendum (SSA 25.38.15-x) for availability and 
  required versions of prerequisite/optional software.  
 
ORDERING INFORMATION                                                          

Software Licenses:  QL-015A*-**                                               
Software Media:  QA-015A*-**                                                  
Software Documentation:  QA-015AA-GZ                                          
Software Product Services:  QT-015A*-**                                       

*  Denotes variant fields. For additional information on available licenses, 
   services and media, refer to the appropriate price book.

SOFTWARE LICENSING

This software is furnished under the licensing provisions of DIGITAL's
Standard Terms and Conditions. For more information about DIGITAL's licensing
terms and policies, contact your local DIGITAL office. 

LICENSE MANAGEMENT FACILITY SUPPORT                                           

This layered product supports the VMS License Management Facility License
units for this product are allocated on a CPU-capacity basis. 

For more information on the License Management Facility, refer to the VMS
Operating System Software Product Description (SPD 25.01.xx) or the VMS
Operating System documentation set. 

For more information on DIGITAL's licensing policies, contact your local
DIGITAL office. 

SOFTWARE PRODUCT SERVICES

A variety of service options are available.  For more information on these or
other services, please contact your local DIGITAL office. 

SOFTWARE WARRANTY

Warranty for this software product is provided by DIGITAL with the purchase
of a license for the product as defined in the Software Warranty Addendum of
this SPD. 

(r)  UNIX is a registered trademark of AT&T in the U.S. and other countries.

March 1989
AE-M878P-TE
