PRODUCT NAME: VAX Ada, Version 2.0                            SPD 26.60.08   

DESCRIPTION

VAX    Ada    is   DIGITAL's  validated  implementation    of    the    full
ANSI/MIL-STD-1815A-1983 Ada Language.  The VAX Ada  compiler  runs under the
VMS Operating System and generates optimized,  sharable,
and position-independent code.

As a native mode VMS language, VAX Ada is  integrated  into  the  VMS common
language  environment.    All  VMS  system  services and utilities are  thus
available to programs written in VAX Ada.  VAX Ada supports  the  VAX Record
Management Services (RMS)  sequential,  relative,  and  indexed  file 
organizations and associated access methods.  VAX Ada programs can invoke modules
written in other VMS languages.    Additionally,  programs  written in other
languages can invoke VAX Ada modules.

Ada  is  a  powerful, general-purpose language  that  supports  many  modern
programming  practices.    The language was designed  as  the  result  of  a
competition  sponsored  by  the United States Department of  Defense.    The
purpose of the competition was to define a language suitable for programming
embedded  computer  systems.   Among the requirements for the language  were
features that  would  reduce  software  costs by increasing maintainability,
evolvability, reliability, and portability.

Ada meets these  requirements  by providing a modular structure for programs
and allowing separate compilation  of program units, as well as by providing
strong typing, exception handing, standard  language  features  that must be
supported across implementations, and so on.  Ada provides a number of other
features  that make it suitable for a  variety  of  applications,  including
general,  systems  and  computational  applications.    Because it  includes
language features that support multitasking, Ada is particularly well-suited
for real-time applications.

Ada Language Features

^  Strong typing - An object (variable) of  a given type  may  take on only   
   those  values  that  are  appropriate  to  that  type, and  only  certain
   predefined operations may be performed to data of that type. Because type   
   checking is done at compile  time, strong typing ensures that any  errors   
   associated with incorrect data types are detected at compile time.          

^  Data Abstraction  -  Also known as information  hiding, data abstraction
   hides  implementation details while  providing users with  mechanisms for   
   using  the  implementation.   Abstraction   allows the  user  to focus on  
   important characteristics while ignoring underlying details. Ada provides
   various levels of abstraction through features such as private data types   
   and packages.                                                               

^  Concurrent  Processing  - For many applications, it is important that  a
   program  be  conceived  of  as a number of parallel, rather than  serial,
   activities.   Most  high-order languages provide little or no support for
   handling such parallel or concurrent activities;  they rely on facilities
   of  the  host operating  system.    Ada  uses  tasks  to  allow  parallel
   activities to be programmed directly within the language.         

^  Separate  compilation  - Ada's separate  compilation  feature  allows  a
   programmer to divide a large program  into  compilation units that may be
   compiled at different times.  When a  unit  is  compiled, the Ada program
   library  manager  records information about that unit and  other  related
   units.    This feature is unlike separate compilation features  in  other
   languages,  where  very  little  information  about  separately  compiled
   modules is maintained.                                                      

^  Generic Definitions -  A  generic unit is a template from which specific
   instances can be made  at  compile  time.  In many cases, the logic of an
   algorithm or a set of  operations  is independent of the specific type of
   the values being manipulated.  However, in a strongly typed language such
   as Ada, all types must be defined  at  compile time.  Generic definitions
   allow  the  user  to  define  a  general  algorithm  or  set  of  related
   operations, and then create a specific instance of that  algorithm or set
   of  operations  for each type to which the algorithm or  operations  must
   apply.              

^  Exception Handling  -  In  many operations, especially embedded computer
   systems, it is  critical  that  a  system  be able to recover quickly and
   efficiently from error conditions.  Ada provides the ability to raise and
   handle exceptions.  It includes  predefined  exceptions  and also permits
   the user  to  define  exceptions.    When  an  exception occurs in an Ada
   program,  normal processing  is  abandoned  and  control  passes  to  the  
   exception handler.                                        

VAX Ada Components and Special System-Related Features

^  An  Ada  compiler fully conforming to ANSI/MIL-STD-1815A-1983 ("Reference
   Manual for the Ada Programming Language") and validated by  the Ada Joint
   Program Office.                                                       

^  An  Ada  program  library  manager  that provides support for programming
   teams through:

   -  Program libraries that can be shared by many programmers                

   -  Program  sublibraries  that  can be used to isolate, develop, and test
      Ada units in the context of parent program libraries

   -  Automatic recompilation of obsolete compilation units

   -  The ability to share compiled Ada code either by reference or copy    

^  High-level, fully symbolic debugging capability through the VMS debugger,
   including support for:

   -  Mixed Ada and non-Ada code

   -  Packages

   -  Tasking programs                                                       

^  Integration with VMS operating system including:

   -  Conformance to the VAX Calling Standard, which allows Ada code to call
      and be called by code  written  in other languages, as well as to call
      VMS system services and the VMS run-time library            

   -  The  ability to call VAX Record  Management  Services  (RMS)  routines
      directly                                                                

   -  Full access to relative and indexed file capabilities                   

   -  The  ability  to  handle  exceptions from non-Ada  code  and  generate
      exceptions to be handled by non-Ada code

   -  The ability to handle VMS asynchronous system traps (ASTs)              

   -  The ability to link with shared images and use shared global sections   

   -  The ability to share data with non-Ada code  through  global variables
      and psects (common blocks)

^  System-dependent    facilities    -    Different  systems  vary  in  such
   characteristics as the size  of  storage  units,  memory  size,  and  the
   smallest  and  largest  integer  values  supported.    Ada  provides  the
   predefined  package SYSTEM to  define  system-related  constants  and  to
   represent system-dependent information.

   Ada also provides representation clauses,  which allow the user to tailor
   the representation of data to suit a particular system.

   VAX Ada provides:                                                           

   -  Length clauses, which specify the amount of  storage associated with a
      type.                                                                   

   -  Enumeration  representation clauses, which specify the internal  codes
      for the literals of enumeration types.                                  

   -  Record  representation  clauses, which specify the layout of a  record
      type, such as the order, position, and size of record components.       

   -  Address  clauses,  which  specify  required  addresses in  storage for
      particular entities (in VAX Ada, only for constants and variables).     

   Finally, VAX  Ada provides a number of pragmas (compiler directives) that
   allow various system-related  parameters  to  be set and changed, control
   mixed-language programming, and so on.                          

^  Comprehensive  diagnostic  messages,  including  automatic  syntax  error
   correction, directed at helping the new Ada user.                           

HARDWARE REQUIREMENTS

VAX, MicroVAX or VAXstation configuration as specified in the System Support 
Addendum (SSA 26.60.08-x).

SOFTWARE REQUIREMENTS*
 
For systems using terminals: (No DECwindows interface)
  
^ VMS Operating System      
 
For workstations running VWS:
 
^ VMS Operating System      
^ VMS Workstation  Software 

*Refer to the System Support Addendum for availability and required versions
 of prerequisite/optional software (SSA 26.60.08-x).


ORDERING INFORMATION     

Non-Educational Institutions

Software Licenses: QL-056A*-**                                  
Software Media: QA-056A*-**
Software Documentation: QA-056AA-GZ
Software Product Services:  QT-056A*-**

Educational Institutions Only

Software Licenses: QL-058A*-**                                  
Software Media: QA-058A*-**
Software Documentation: QA-056AA-GZ
Software Product Services:  QT-058A*-**

*Denotes variant fields.  For additional information on available licenses,
 services and media, refer to the appropriate price book.

SOFTWARE LICENSING

This  software  is  furnished under the licensing  provisions  of  DIGITAL's
standard  Terms  and  Conditions.    For  more information  about  DIGITAL's
licensing terms and policies, contact your local DIGITAL office. 

Licenses for Educational Institutions

An educational institution shall qualify for an educational license if it is
lawfully  operating  either  as  a  1) accredited college or university,  2)
vocational/technical/trade  school, or  3)  state/local  school  system,  4)
independent  secondary  school,  exclusively    for  non-profit  educational
purposes.

By  placing  an  order  for  product(s) described  in the  Software  Product
Description, your school certifies  that it is lawfully operating  as one of
the above, exclusively for non-profit educational purposes.

LICENSE MANAGEMENT FACILITY SUPPORT

This layered product  supports the VMS License Management Facility.  

License units for this product  are  allocated  on  a  CPU-capacity basis.  

For more information on the License Management  Facility,  refer to the VMS 
Operating System  Product  Description  (25.01.xx)  or  the    VMS   
Operating  System documentation set.

For  more information on DIGITAL's licensing policies,  contact  your  local
DIGITAL office.

SOFTWARE PRODUCT SERVICES

A variety of service options are  available  from DIGITAL.  For more information 
contact your local DIGITAL office.

SOFTWARE WARRANTY

Warranty for this software product  is provided by DIGITAL with the purchase
of a license for the product as defined in the Software Warranty Addendum of
this SPD.


JUNE, 1989
AE-EU91I-TE

