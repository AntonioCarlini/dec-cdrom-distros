%!PS-Adobe-1.0
%%Title: GEM02D$:[DUNCAN.WPSPLUS]0002312LSPD8.TMS;1
%%Creator: DECpage V3.0
%%CreationDate: 21-NOV-1989 14:56:55.48
%%Pages: (at end)
%%DocumentFonts: (atend)
%%EndComments
statusdict begin 0 setjobtimeout end
/CF /currentfont load def
/CP /currentpoint load def
/FF /findfont load def
/GR /grestore load def 
/GS /gsave load def
/LI /lineto load def
/MF /makefont load def 
/MO /moveto load def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SC /scale load def
/SD /setdash load def
/SE /setfont load def
/SF /scalefont load def
/SH /show load def
/ST /stroke load def
/SW /setlinewidth load def
/TR /translate load def

/BD {bind def} bind def
/DPT {FF exch SF SE}BD
/HTD{/ht exch def pop pop pop}BD
/MTCFP{false charpath flattenpath pathbbox}BD
/TCFP{true charpath flattenpath pathbbox}BD
  
% partial line up
/PLU {
 /CURSCAL CF /FontMatrix get 3 get 1000 mul def
  0 CURSCAL .5 mul RM
}BD
  
% partial line down
/PLD {
 /CURSCAL CF /FontMatrix get 3 get 1000 mul def
 0 CURSCAL -0.5 mul RM
}BD
  
/SavedX 0 def  
/SavedY 0 def  
/SavedString () def
/ShowInit
    {CP /SavedY exch def /SavedX exch def}BD
/bold
    {dup /SavedString exch def
    400 CF /FontMatrix get 3 get mul -12000 div 0 RM SH
    SavedX SavedY MO
    800 CF /FontMatrix get 3 get mul -12000 div 0 RM 
    SavedString SH
    SavedX SavedY MO
    SavedString SH
    }BD
/D1 
    {ShowInit bold}BD

% show string bold
/DPJB{
 /st 1 string def 
 /x exch def
 {st 0 3 -1 roll put st ( ) eq{x 0 RM}{st D1}ifelse}forall
}BD
% show string
/DPJ{( ) stringwidth pop sub 0 32 4 -1 roll widthshow}BD  

/DPF1
    {CP TR
    .5 .5 SC
    0 .6 DPFX mul MO SH
    .6 DPFX mul 0 MO SH
    0 0 MO 1.2 DPFX mul 1.2 DPFX mul LI ST
    GR
    .6 DPFX mul 0 RM
    }BD
  
% show fraction mono
/MDPF
    {exch
    GS
    /DPFX CF /FontMatrix get 3 get def
    DPF1
    }BD
/DPF1B
    {CP TR
    .5 .5 SC
    0 .6 DPFX mul MO D1
    .6 DPFX mul 0 MO D1
    0 0 MO 1.2 DPFX mul 1.2 DPFX mul LI ST
    GR
    .6 DPFX mul 0 RM
    }BD
  
% show fraction mono
/MDPFB
    {exch
    GS
    /DPFX CF /FontMatrix get 3 get def
    DPF1B
    }BD
  
% show fraction
/DPF{
 /CURSCAL CF /FontMatrix get 3 get 1000 mul def
 /den exch def
 /num exch def
 /regf CF def
 /frf CF [.65 0 0 .6 0 0] MF def
 GS newpath 0 0 MO /Symbol FF CURSCAL SF SE (\244) TCFP HTD GR 
 0 .4 ht mul RM frf SE num SH 0 .4 ht mul neg RM 
 /Symbol FF CURSCAL SF SE (\244) SH 
 frf SE den SH regf SE
}BD
  
% show sup/inf
/DPIS{
 /regf CF def
 /sy CP exch pop def
 /supinf CF [.65 0 0 .6 0 0] MF def 
 GS newpath 0 0 MO TCFP HTD GR 0 exch ht mul RM supinf SE SH regf SE 
 CP pop sy MO
}BD
  
% show sup
/DPS{.40 (I) DPIS}BD
  
%show inf
/DPI{dup -.15 exch DPIS}BD
  
% show mono sup
/MDPS{
 GS newpath 0 0 MO (1) MTCFP HTD GR 
 0 ht .5 mul RM SH
 0 ht -.5 mul RM
}BD
  
%show mono inf
/MDPI{
 GS newpath 0 0 MO (1) MTCFP HTD GR 
 0 ht -.5 mul RM SH
 0 ht .5 mul RM
}BD
% show mono sup
/MDPSB{
 GS newpath 0 0 MO (1) MTCFP HTD GR 
 0 ht .5 mul RM D1
 0 ht -.5 mul RM
}BD
  
%show mono inf
/MDPIB{
 GS newpath 0 0 MO (1) MTCFP HTD GR 
 0 ht -.5 mul RM D1
 0 ht .5 mul RM
}BD
  
/reencodedict 12 dict def
/ReEncode
  { reencodedict begin
    /newencoding exch def
    /newfontname exch def
    /basefontname exch def
    /basefontdict basefontname FF def
    /newfont basefontdict maxlength dict def
    basefontdict
    	{ exch dup /FID ne 
    	    {dup /Encoding eq
    		{exch dup length array copy 
    		    newfont 3 1 roll put}
	  	{ exch newfont 3 1 roll put }
	     ifelse
    	    }
	    { pop pop }
    	    ifelse
       } forall
  newfont /FontName newfontname put
  newencoding aload pop
  newencoding length 2 idiv
    {newfont /Encoding get 3 1 roll put}
    repeat
  newfontname newfont definefont pop
  end
 }BD
  
/DPMCS [
% DEC Supplemental side:
160 /.notdef
161 /exclamdown 
162 /cent 
163 /sterling 
164 /fraction 
165 /yen 
166 /.notdef
167 /section 
168 /currency 
169 /copyright 
170 /ordfeminine 
171 /guillemotleft 
172 /.notdef
173 /.notdef
174 /.notdef
175 /.notdef
176 /.notdef  % degree
177 /.notdef  % plus/minus
178 /.notdef  % superscript 2
179 /.notdef  % superscript 3
180 /.notdef
181 /.notdef  % micro
182 /paragraph 
183 /periodcentered 
184 /.notdef
185 /.notdef  % superscript 1
186 /ordmasculine 
187 /guillemotright 
188 /.notdef  % 1/4
189 /.notdef  % 1/2
190 /.notdef
191 /questiondown 
192 /Agrave 
193 /Aacute 
194 /Acircumflex 
195 /Atilde 
196 /Adieresis 
197 /Aring 
%198 /.notdef  % /AE 
198 /AE 
199 /Ccedilla 
200 /Egrave 
201 /Eacute 
202 /Ecircumflex 
203 /Edieresis 
204 /Igrave 
205 /Iacute 
206 /Icircumflex 
207 /Idieresis 
208 /.notdef
209 /Ntilde 
210 /Ograve 
211 /Oacute 
212 /Ocircumflex 
213 /Otilde 
214 /Odieresis 
%215 /.notdef  % /OE 
215 /OE 
216 /Oslash 
217 /Ugrave 
218 /Uacute 
219 /Ucircumflex 
220 /Udieresis 
221 /Ydieresis 
222 /.notdef
223 /germandbls 
224 /agrave 
225 /aacute 
226 /acircumflex 
227 /atilde 
228 /adieresis 
229 /aring 
%230 /.notdef %ae
230 /ae
231 /ccedilla 
232 /egrave 
233 /eacute 
234 /ecircumflex 
235 /edieresis 
236 /igrave 
237 /iacute 
238 /icircumflex 
239 /idieresis 
240 /.notdef
241 /ntilde 
242 /ograve 
243 /oacute 
244 /ocircumflex 
245 /otilde 
246 /odieresis 
%247 /.notdef %oe
247 /oe 
248 /oslash 
249 /ugrave 
250 /uacute 
251 /ucircumflex 
252 /udieresis 
253 /ydieresis 
254 /.notdef 
  
129 /grave 
130 /acute 
131 /circumflex 
132 /tilde 
133 /dieresis 
134 /ring 
135 /cedilla 
136 /dotlessi 
137 /macron
138 /breve
139 /dotaccent
140 /hungarumlaut
141 /ogonek
142 /caron
143 /endash
144 /emdash
145 /dagger
146 /daggerdbl
147 /bullet
148 /fi
149 /fl
150 /quotedblleft
151 /quotedblright
152 /registered
153 /trademark
154 /quotedblbase
] def
  
/cvc
{ 
( )
dup
0 
4 -1 roll
put
}BD
  
/Courier /CourierExtended DPMCS ReEncode
/ExtendedEncoding /CourierExtended FF /Encoding get def
/SymbolEncoding /Symbol FF /Encoding get def
  
/ExtendedDecoding ExtendedEncoding length dict def
ExtendedDecoding begin
0 1 ExtendedEncoding length 1 sub
{ 
dup
ExtendedEncoding exch get
exch def
}for
end
/SymbolDecoding SymbolEncoding length dict def
SymbolDecoding begin
0 1 SymbolEncoding length 1 sub
{ 
dup
SymbolEncoding exch get
exch def
}for
end
  
/BBox [0 -.25 .6 .75] def
  
/superscript
{/CourierExtended FF SE
.6667 .6667 SC
0 .2667 MO
SH
}BD
  
/diphthong
{ 
{/CourierExtended FF [.6667 0 .1786 1 0 0] MF SE}
{/CourierExtended FF [.66666667 0 0 1 0 0] MF SE}
ifelse
0 0 MO
CP TR
SH
/CourierExtended FF
[.6667 0 0 1 0 0] MF SE
.26 0 MO
SH
}BD
  
/ctrl
{/CourierExtended FF SE
.8333 .8333 SC
0 .3 MO
SH
.1371 -.3 MO
SH
}BD
  
/fraction
{/CourierExtended FF SE
.5 .5 SC
0 .6 MO
SH
.6 0 MO
SH
0 0 MO
1.2 1.2 LI
ST
}BD
  
/McsEncoding ExtendedEncoding def
McsEncoding
dup 169 /copyrightsans put
dup 176 /degree put
dup 177 /plusminus put
dup 178 /twosuper put
dup 179 /threesuper put
dup 181 /mu put
dup 185 /onesuper put
dup 188 /onefourth put
dup 189 /onehalf put
dup 198 /AE put
dup 215 /OE put
dup 230 /ae put
dup 247 /oe put
pop
  
/TcsEncoding  256 array def
32 1 94 {TcsEncoding exch dup McsEncoding exch get put} for
TcsEncoding
dup 95 /space put
dup 96 /diamond put
dup 97 /blob put
dup 98 /HT put
dup 99 /FF put
dup 100 /CR put
dup 101 /LF put
dup 102 /degree put
dup 103 /plusminus put
dup 104 /NL put
dup 105 /VT put
dup 106 /crnlr put
dup 107 /crnur put
dup 108 /crnul put
dup 109 /crnll put
dup 110 /cross put
dup 111 /scan1 put
dup 112 /scan3 put
dup 113 /scan5 put
dup 114 /scan7 put
dup 115 /scan9 put
dup 116 /tl put
dup 117 /tr put
dup 118 /tb put
dup 119 /tt put
dup 120 /vertical put
dup 121 /lessequal put
dup 122 /greaterequal put
dup 123 /pi put
dup 124 /notequal put
dup 125 /sterling put
dup 126 /periodcentered put
pop
TcsEncoding
dup 161 /radicalleft put
dup 162 /radicallefttp put
dup 163 /horizontalext put
dup 164 /integraltp put
dup 165 /integralbt put
dup 166 /verticalext put
dup 167 /bracketlefttp put
dup 168 /bracketleftbt put
dup 169 /bracketrighttp put
dup 170 /bracketrightbt put
dup 171 /bracelefttp put
dup 172 /braceleftbt put
dup 173 /bracerighttp put
dup 174 /bracerightbt put
dup 175 /braceleftmid put
dup 176 /bracerightmid put
dup 177 /sumtpleft put
dup 178 /sumbtleft put
dup 179 /sumtpvert put
dup 180 /sumbtvert put
dup 181 /sumtpright put
dup 182 /sumbtright put
dup 183 /sumrightmid put
dup 184 /questionreverse put
dup 185 /questionreverse put
dup 186 /questionreverse put
dup 187 /questionreverse put
dup 188 /lessequal put
dup 189 /notequal put
dup 190 /greaterequal put
dup 191 /integral put
dup 192 /therefore put
dup 193 /proportional put
dup 194 /infinity put
dup 195 /divide put
dup 196 /Delta put
dup 197 /gradient put
dup 198 /Phi put
dup 199 /Gamma put
dup 200 /similar put
dup 201 /approxequal put
dup 202 /Theta put
dup 203 /multiply put
dup 204 /Lambda put
dup 205 /arrowdblboth put
dup 206 /arrowdblright put
dup 207 /equivalence put
dup 208 /Pi put
dup 209 /Psi put
dup 210 /questionreverse put
dup 211 /Sigma put
dup 212 /questionreverse put
dup 213 /questionreverse put
dup 214 /radical put
dup 215 /Omega put
dup 216 /Xi put
dup 217 /Upsilon1 put
dup 218 /propersubset put
dup 219 /propersuperset put
dup 220 /intersection put
dup 221 /union put
dup 222 /logicaland put
dup 223 /logicalor put
dup 224 /logicalnot put
dup 225 /alpha put
dup 226 /beta put
dup 227 /chi put
dup 228 /delta put
dup 229 /epsilon put
dup 230 /phi put
dup 231 /gamma put
dup 232 /eta put
dup 233 /iota put
dup 234 /theta put
dup 235 /kappa put
dup 236 /lambda put
dup 237 /questionreverse put
dup 238 /nu put
dup 239 /partialdiff put
dup 240 /pi put
dup 241 /psi put
dup 242 /rho put
dup 243 /sigma put
dup 244 /tau put
dup 245 /questionreverse put
dup 246 /florin put
dup 247 /omega put
dup 248 /xi put
dup 249 /upsilon put
dup 250 /zeta put
dup 251 /arrowleft put
dup 252 /arrowup put
dup 253 /arrowright put
dup 254 /arrowdown put
pop
  
/CharStrings 61 dict def
CharStrings begin
/crnlr
{0 .25 MO
.3 .25 LI
.3 .75 LI
ST
}BD
/crnur
{0 .25 MO
.3 .25 LI
.3 -.25 LI
ST
}BD
/crnul
{.6 .25 MO
.3 .25 LI
.3 -.25 LI
ST
}BD
/crnll
{.6 .25 MO
.3 .25 LI
.3 .75 LI
ST
}BD
/cross
{0 .25 MO
.6 .25 LI
.3 .75 MO
.3 -.25 LI
ST
}BD
/scan9
{0 -.15 MO
.6 -.15 LI
ST
}BD
/scan7
{0 .05 MO
.6 .05 LI
ST
}BD
/scan5
{0 .25 MO
.6 .25 LI
ST
}BD
/scan3
{0 .45 MO
.6 .45 LI
ST
}BD
/scan1
{0 .65 MO
.6 .65 LI
ST
}BD
/tl
{.3 .75 MO
.3 -.25 LI
.6 .25 MO
.3 .25 LI
ST
}BD
/tr
{.3 .75 MO
.3 -.25 LI
0 .25 MO
.3 .25 LI
ST
}BD
/tb
{0 .25 MO
.6 .25 LI
.3 .75 MO
.3 .25 LI
ST
}BD
/tt
{0 .25 MO
.6 .25 LI
.3 -.25 MO
.3 .25 LI
ST
}BD
/vertical
{.3 .75 MO
.3 -.25 LI
ST
}BD
/radicalleft
{.3 .75 MO
.3 -.25 LI
0 .25 LI
ST
}BD
/radicallefttp
{.6 .25 MO
.3 .25 LI
.3 -.25 LI
ST
}BD
/horizontalext
{0 .25 MO
.6 .25 LI
ST
}BD
/integraltp
{.3 -.25 MO
.3 .75 .45 .75 .25 arcto pop pop pop pop
ST
.53 .67 .1 0 360 arc
fill
}BD
/integralbt
{.3 .75 MO
.3 -.25 .15 -.25 .25 arcto pop pop pop pop
ST
.08 -.17 .1 0 360 arc
fill
}BD
/verticalext
{.3 .75 MO
.3 -.25 LI
ST
}BD
/bracketlefttp
{.6 .75 MO
.3 .75 LI
.3 -.25 LI
ST
}BD
/bracketleftbt
{.3 .75 MO
.3 -.25 LI
.6 -.25 LI
ST
}BD
/bracketrighttp
{0 .75 MO
.3 .75 LI
.3 -.25 LI
ST
}BD
/bracketrightbt
{.3 .75 MO
.3 -.25 LI
0 -.25 LI
ST
}BD
/bracelefttp
{.3 -.25 MO
.3 .75 .6 .75 .5 arcto pop pop pop pop
ST
}BD
/braceleftbt
{.3 .75 MO
.3 -.25 .6 -.25 .5 arcto pop pop pop pop
ST
}BD
/bracerighttp
{.3 -.25 MO
.3 .75 0 .75 .5 arcto pop pop pop pop
ST
}BD
/bracerightbt
{.3 .75 MO
.3 -.25 0 -.25 .5 arcto pop pop pop pop
ST
}BD
/braceleftmid
{.3 .75 MO
.3 .25 .15 .25 .15 arcto pop pop pop pop
.3 -.25 MO
.3 .25 .15 .25 .15 arcto pop pop pop pop
ST
}BD
/bracerightmid
{.3 .75 MO
.3 .25 .45 .25 .15 arcto pop pop pop pop
.3 -.25 MO
.3 .25 .45 .25 .15 arcto pop pop pop pop
ST
}BD
/sumtpleft
{.6 .25 MO
.3 .25 LI
.6 -.25 LI
ST
}BD
/sumbtleft
{.6 .25 MO
.3 .25 LI
.6 .75 LI
ST
}BD
/sumtpvert
{0 .75 MO
.6 -.25 LI
ST
}BD
/sumbtvert
{0 -.25 MO
.6 .75 LI
ST
}BD
/sumtpright
{0 .25 MO
.6 .25 LI
.6 -.25 LI
ST
}BD
/sumbtright
{0 .25 MO
.6 .25 LI
.6 .75 LI
ST
}BD
/sumrightmid
{0 .75 MO
.3 .25 LI
0 -.25 LI
ST
}BD
/arrowdblboth
{.1 .1 MO
.5 .1 LI
.1 .25 MO
.5 .25 LI
.175 .325 MO
0 .175 LI
.175 .025 LI
.425 .325 MO
.6 .175 LI
.425 .025 LI
ST
}BD
/arrowdblright
{.1 .1 MO
.5 .1 LI
.1 .25 MO
.5 .25 LI
.425 .325 MO
.6 .175 LI
.425 .025 LI
ST
}BD
/arrowleft
{0 .25 MO
.6 .25 LI
.15 .4 MO
0 .25 LI
.15 .1 LI
ST
}BD
/arrowup
{.3 .5 MO
.3 0 LI
.15 .35 MO
.3 .5 LI
.45 .35 LI
ST
}BD
/arrowright
{0 .25 MO
.6 .25 LI
.45 .4 MO
.6 .25 LI
.45 .1 LI
ST
}BD
/arrowdown
{.3 .5 MO
.3 0 LI
.15 .15 MO
.3 0 LI
.45 .15 LI
ST
}BD
/blob
{0 -.25 TR
CharWidth 1 SC
6 10
false
[6 0 0 -10 0 10]
{<55 AA>}
imagemask
}BD
/questionreverse
{/CourierExtended FF SE
.6 0 MO
-1 1 SC
(?) SH
}BD
/onesuper {(1) superscript}BD
/twosuper {(2) superscript}BD
/threesuper {(3) superscript}BD
/AE {(E) (A) true diphthong}BD
/OE {(E) (O) false diphthong}BD
/ae {(e) (a) false diphthong}BD
/oe {(e) (o) false diphthong}BD
/HT {(T) (H) ctrl}BD
/FF {(F) (F) ctrl}BD
/CR {(R) (C) ctrl}BD
/LF {(F) (L) ctrl}BD
/NL {(L) (N) ctrl}BD
/VT {(T) (V) ctrl}BD
/onehalf {(2) (1) fraction}BD
/onefourth {(4) (1) fraction}BD
end
  
/BuildCharDict 3 dict def
/BuildChar
{ 
BuildCharDict begin
/char exch def
/fontdict exch def
/charname fontdict /Encoding get char get def
fontdict begin
CharWidth 0
FontBBox aload pop
setcachedevice
CharStrings charname known
{.05 SW CharStrings charname get
exec
} 
{ExtendedDecoding charname known
{/CourierExtended FF SE
ExtendedDecoding charname get
} 
{/Symbol FF SE
.8 .8 SC
SymbolDecoding charname get
} 
ifelse
cvc
0 0 MO
SH
} 
ifelse
end
end
}BD
  
/Courier-MCS 11 dict dup begin
/FontType 3 def
/FontBBox BBox def
/BuildChar /BuildChar load def
/Encoding McsEncoding def
/CharWidth .6 def
/FontMatrix [1 0 0 1 0 0] def
/UnderlineThickness 75 def
/UnderlinePosition 250 def
/StrikethroughThickness 75 def
/StrikethroughPosition -275 def
end definefont pop
  
/Courier-TECH 11 dict dup begin
/FontType 3 def
/FontBBox BBox def
/BuildChar /BuildChar load def
/Encoding TcsEncoding def
/CharWidth .6 def
/FontMatrix [1 0 0 1 0 0] def
/UnderlineThickness 75 def
/UnderlinePosition 250 def
/StrikethroughThickness 75 def
/StrikethroughPosition -275 def
end definefont pop
%%EndProlog
 /Helvetica-Bold /Helvetica-Bold-DPMCS DPMCS ReEncode /Helvetica /Helvetica-DPMCS DPMCS ReEncode% SPD (8.5*11") 'software' logo.
% Aidan Killian ESDC Galway 14/05/86.
% Amended to position logo to left margin on 12-Aug-1986
% at ESDC Galway (AK/MS).
/LOGO8A {
save						% Save current environment

/digital-font /Helvetica-Bold findfont 
[35 34 div .65 mul 0 0 .75 0 0] makefont def

/box-width 35 34 div .405 mul def
/box-pitch box-width .85 div def

/digital-box { 
  gsave 
    box-pitch box-width sub 2 div -.225 rmoveto
    box-width 0 rlineto 
    0 1 rlineto box-width neg 0 rlineto 
    closepath fill 
  grestore 
  gsave
    dup stringwidth pop box-pitch exch sub 2 div 0 rmoveto 
    1 setgray 
    show
  grestore
  box-pitch 0 rmoveto
} def 

/digital_logo {
  % draws digital logo with left baseline point at current point with
  % specified height using current color for boxes and white letters 
  % and moves current point in x direction by about 3.433 times height

  dup scale 
  digital-font setfont 
  0 1 6 {(digital) exch 1 getinterval digital-box} for 
} def 

/sw 1 def					% Stroke width / 2

/std 68 def					% Start Displ.

/bl 60 def					% Char Levels
/cbl bl sw add def
/ol bl 18.4 add def
/xl bl 36.8 add def
/cxl xl sw sub def
/wl xl sw add sw add def
/tl bl 59.5 add def
/ctl tl sw sub def
/dl xl 10.5 add def
/rll bl 14 sub def

/cr ol bl sub sw sub def			% Sub-char Radii
/s1r 10 def
/s2r 8 def
/fr 9.1 def
/rr 12.4 def

/el bl 19.3 add def				% Sub-char Levels
/e2l bl 10.3 add def
/s1l cbl s1r add def
/s2l cxl s2r sub def
/s3l bl 19.8 add def

/sd std s1r add sw add def			% Char Displ.
/od std 42.5 add def
/fd std 66 add def
/td std 86.5 add def
/wd std 102 add def
/ad std 168 add def
/rd std 194 add def
/ed std 221.3 add def
/end cr cr add ed add def

/f2d fd 6 sub def				% Sub-char Displ.
/t2d td 7.7 sub def
/w2d wd 26 add def
/w3d wd 52 add def
/a2d ad cr add 0.4 sub def

/dsz 15.9 def
/bsw 18 def
/bd wd 375.5 add def

sw sw add setlinewidth
} def
/LOGO8B {
newpath
sd s2l s2r 0 180 arc 
sd s2r sub s2l 5 sub sd 3.6 sub s3l 1 add sd s3l curveto 
sd 3.6 add s3l 1 sub sd s1r add s1l 5 add sd s1r add s1l curveto 
sd s1l s1r 0 180 arcn stroke

od ol cr 0 360 arc stroke

fd cbl moveto 
fd ctl td ctl fr arcto pop pop pop pop 
f2d cxl moveto 
fd fr add cxl lineto stroke

td bl 1 add moveto 
td tl lineto 
t2d cxl moveto 
td fr add cxl lineto stroke

gsave
  td cbl moveto 
  td xl lineto 
  ad xl lineto 
  ad cbl lineto clip newpath

  wd xl moveto 
  wd cbl lineto 
  w2d wl lineto 
  w2d cbl lineto 
  w3d wl lineto stroke
grestore

gsave
  a2d bl moveto 
  a2d xl lineto 
  wd xl lineto 
  wd bl lineto clip newpath

  ad ol cr 0 365 arc stroke
grestore

gsave
  a2d sw add cbl moveto 
  a2d sw sub cbl lineto 
  ad ol cr 300 60 arc 
  a2d sw sub xl lineto 
  a2d sw add xl lineto clip newpath

  a2d cbl moveto 
  a2d xl lineto stroke
grestore

rd cbl moveto 
rd xl lineto 
rd cbl moveto 
rd cxl ed cxl rr arcto pop pop pop pop stroke

gsave
  rd bl moveto 
  rd xl lineto 
  end xl lineto 
  end el sw sub lineto
  ed el sw sub lineto 
  ed e2l lineto 
  end e2l lineto 
  end bl lineto clip newpath

  ed ol cr 0 360 arc 
  ed cr sub el moveto 
  ed cr add el lineto stroke
grestore

gsave
  wd sw sub dl moveto dsz digital_logo
grestore

bsw setlinewidth

wd sw sub rll moveto 
bd rll lineto stroke

restore						% Restore previous environment
} def
/LOGO8 { LOGO8A LOGO8B} def
 save
%%Page: 1 1

0 657.04 MO 10.00 /Courier-MCS DPT
 /save-pc$postscript-graphic save def 
56.78 654.59 TR 
 0 95.64 490.16 512.00 div 96.00 mul  sub  2  div  TR 490.16 512.00 div 490.16 512.00 div  SC 
0.00 -1 mul  526.00 -1 mul  TR 
 /showpage {} def /initmatrix {} def /initgraphics {} def /initclip {} def /erasepage {} def /copypage {} def /exitserver {} def /letter {} def /note {} def /legal {} def
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Cricket Draw 1.1
%%Title:SPD8TOP.ps
%%CreationDate:11/11/88   3:43 PM
%%DocumentFonts: Helvetica
%%BoundingBox:0 526 512 622 
%%Pages:0
%%EndComments
/vmstate save def
/$cricket 210 dict def
$cricket begin 1 -1 scale
0 -622  translate
2 setlinecap
/d /def load def
/b {bind d}bind d
/l {load d}b
/e /exch l
/x {e d}b
/C /closepath l
/CP /currentpoint l
/SH /show l
/g /gsave l
/G /grestore l
/i /if l
/I /ifelse l
/v /getinterval l
/V /putinterval l
/W /stringwidth l
/SG /setgray l
/N /newpath l
/M /moveto l
/L /lineto l
/R /rlineto l
/T /translate l
/D /dup l
/* /mul l
/+ /add l
/- /sub l
/? /div l
/ma {* +}b 
/h {D * e D ma sqrt}d
systemdict D /setpacking known D {/packstate currentpacking d D setpacking}i /pack? x
begin /settransfer load /setscreen load end 
/setscreen x /settransfer x
/dt [ currenttransfer ] cvx d 
/ds [ currentscreen D [ e ] cvx /devSpot x ] cvx d 
/jp {e [ 3 1 roll aload pop counttomark -1 roll aload pop ] cvx}b 
/settransfer {dt jp settransfer}b 
/macvec dup where not { 256 array d 
macvec 0 StandardEncoding
0 128 getinterval putinterval
macvec 16#27 /quotesingle put
macvec 16#60 /grave put
/Adieresis /Aring /Ccedilla /Eacute /Ntilde /Odieresis /Udieresis /aacute
/agrave /acircumflex /adieresis /atilde /aring /ccedilla /eacute /egrave
/ecircumflex /edieresis /iacute /igrave /icircumflex /idieresis /ntilde /oacute
/ograve /ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex /udieresis
/dagger /degree /cent /sterling /section /bullet /paragraph /germandbls
/registersans /copyrightsans /trademarksans /acute /dieresis /notequal /AE /Oslash
/infinity /plusminus /lessequal /greaterequal /yen /mu /partialdiff /summation
/product /pi /integral /ordfeminine /ordmasculine /Omega /ae /oslash
/questiondown /exclamdown /logicalnot /radical /florin /approxequal /Delta /guillemotleft
/guillemotright /ellipsis /space /Aacute /Atilde /Otilde /OE /oe
/endash /emdash /quotedblleft /quotedblright /quoteleft /quoteright /divide /lozenge
/ydieresis /Ydieresis /fraction /currency /guilsinglleft /guilsinglright /fi /fl
/daggerdbl /periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Agrave
/Edieresis /Egrave /Iacute /Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex
/apple /Ograve /Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde
/macron /breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
macvec 128 128 v astore pop}{pop pop}I
/ad {+ d}b 
/sd {- d}b 
/td {* d}b 
/dd {? d}b
/c {2 ? e 2 ? e}b 
/n0 {D 0 eq {pop}}b
/m1 matrix d /m2 matrix d /m3 matrix d
/ct 0 d 
/s+ 0 d 
/po 0 d 
/ts 40 string d
/s1 (|______) d
ts 0 s1 V
/sp ( ) d
/SM {/m3 m3 currentmatrix d}b 
/RM {m3 setmatrix}b 
/dpi 72 0 matrix defaultmatrix dtransform h d
/inch {72 *}b
/cm {28.3465 *}b
/pi 3.1415923 d
/fs 256 string d 
/sh {m1 m2 copy 2 3 -1 roll sin put m2 concat}b 
/fc {T n0 {rotate}I scale n0 {sh}I}b 
/a {/ea x /sa x SM -1 * scale 0 0 1 sa ea 2 copy gt {arcn}{arc}I RM}b 
/cn {SM T x1 y1 scale 0 0 1 ct 90 * D 90 + arc /ct ct 1 ad RM}b 
/rr {/y1 x /x1 x /ct 0 d c y1 - /yr x x1 - /xr x N xr yr cn xr neg yr cn xr neg yr neg cn xr yr neg cn C}b 
/dg 
{/lc x clip rotate T /dy x /dx x
0 eq {N 
1 eq {1 10 lc ? 10{log dy * 0 e neg M dx 0 R}for lc 10 gt{dy 0 e neg M dx 0 R}i}
{lc 1 eq {0 0 e neg M dx 0 R}{/st dy lc 1 - dd 0 1 lc 1 - {st * 0 e neg M dx 0 R}for}I}I
stroke}
{1 eq {/st 0 d /inc 10 lc 1 + dd dx dy lt {/rd dx d}{/rd dy d}I
1 1 lc {/di st 1 + log 10 log ? rd td N dx di - dy di - 0 360 a C stroke /st st inc ad}for} 
{dx dy lt {/st dx lc dd}{/st dy lc dd}I lc {N dx dy 0 360 a C stroke /dx dx st sd /dy dy st sd}repeat} I
}I}b
/sb {/ea x /ia x /sa x /yr x /xr x ea sa lt{/ia ia neg d}i N sa ia ea{D /x1 e cos xr td /y1 e sin yr * neg d x1 y1 M 0 0 L}for}b
/bm {/y1 x /x1 x bitgray SG x1 y1 /md where {pop md /invertflag get not}{true}I 
[x1 0 0 y1 0 0] {currentfile picstring readhexstring pop}imagemask}b
/c1 .166667 d /c2 .833333 d /c3 .5 d
/p3 {+ c3 *}b 
/dc{/y2 x /x2 x x0 c1 * x1 c2 ma y0 c1 * y1 c2 ma x1 c2 * x2 c1 ma y1 c2 * y2 c1 ma x1 x2 p3 y1 y2 p3 curveto}b 
/mp {/x0 x1 d /y0 y1 d /x1 x2 d /y1 y2 d}b
/SPOLY_INIT
{/SPOLY_SAVE save d /cls x
/M {2 copy /y0 x /x0 x moveto /M /moveto load d}d
/L {/y1 x /x1 x x0 x1 p3 y0 y1 p3
cls {/yy y1 d /xx x1 d /C {mp xx yy dc systemdict /closepath get exec}d M}
{lineto}I /L {{dc mp}stopped {/L {pop pop}d /noerr false d}i}d}d}d
/SPOLY_END {SPOLY_SAVE restore}b
/ah {g 2 copy T 3 -1 roll - 3 1 roll e - atan rotate os 0 M hl hw R 0 hw 2 * neg R C fill G}b
/da 
{g stroke G 
g currentlinewidth D -10 * D /hl x -2 ? /os x 2 * /hw x /bp x /ep x
.2 setlinewidth 0 setlinejoin 
g flattenpath {}{}{}{} pathforall 
count 8 eq {8 4 roll}i
count 8 gt {count 4 roll mark count 8 - 1 roll cleartomark}i 
count 6 eq {6 2 roll 2 copy 8 2 roll}i
count 4 eq {4 copy}i G
N bp {4 2 roll ah}{pop pop pop pop}I ep {ah}{clear}I G}b 
/tp {sm0 transform}b 
/sfp {} d 
/op {{tp moveto}{tp lineto}{3{tp 6 2 roll}repeat curveto}{C} pathforall sfp stroke}b 
/sm0 matrix d /sm1 matrix d
/so 
{SG /eg x /tg x /yt x /xt x 
xt 0 ne yt 0 ne or {
xt abs yt abs gt {/tt xt abs d}{/tt yt abs d}I
tt 144 gt {/ct dpi 2 dd /sfp{g eofill G}d}
{tt 72 gt {/ct dpi 4 dd /sfp{g eofill G}d}
{/ct dpi 4 dd}I}I
/ig tg eg - ct ? neg d
/x1 xt ct ? neg d /y1 yt ct dd 
1 0 0 1 xt yt sm0 astore pop 
1 0 0 1 x1 y1 neg sm1 astore pop
g op G
1 1 ct{g ig * tg + SG sm0 D sm1 e concatmatrix pop op G}for}i}b
/css {T 0 0 M xsp 0 32 Txt widthshow}b
/sc 
{g /xsp x /tg x /eg x /sg x /y1 x /x1 x /Txt x
/sst dpi 4 dd /y2 y1 sst dd /x2 x1 neg sst dd
eg sg eq {/sg sg .001 sd}i
/ig eg sg - sst ? neg d 
g tg SG x1 y1 neg css 
eg ig + ig sg {SG x2 y2 css}for G 
x2 y2 css G}b 
/gbb {pathbbox /y1 x /x1 x /y2 x /x2 x /x3 x1 x2 sd /y3 y1 y2 sd}b 
/radf 
{/dn dpi 300 ? 8 * 24 ad /ig rg 255 ? dn dd
sg 255 ? SG eoclip gbb 
x2 x3 2 ? + y2 y3 2 ? + T N
x3 y3 h 2 ? D dn ? neg 1 
{0 0 3 -1 roll 0 360 arc C fill currentgray ig + SG}for}b
/dof 
{/ff x 
eoclip 180 - rotate gbb
x1 y1 T 180 rotate x3 y3 scale
0 1 255 {fs e D 255 ? ff rg * sg + round cvi put}for
1 256 8 [1 0 0 256 0 0] fs image}b
/gft {radf {{} dof}{{1 e - 9 * 1 + log 1 e -}dof}}b
/df 
{g 2 copy eq {SG clear fill}{255 * e 255 * e 1 index - /rg x /sg x /gft load e get exec}I G}b 
/oc
{/tl x /ju x /di 0 d 
g flattenpath
{/y1 x /x1 x}{/y2 x /x2 x /dx x2 x1 sd /dy y2 y1 sd /di dx D * dy D ma sqrt di ad /x1 x2 d /y1 y2 d}
{}{/y2 x /x2 x /dx x2 x1 sd /dy y2 y1 sd /di dx D * dy D ma sqrt d}pathforall
ju 0 eq{/po 0 store}i
ju 1 eq{/po di tl - 2 ? store}i
ju 2 eq{/po di tl - store}i G}b
/pt {/FM true d /os x /sr x /os os sr 0 1 v W pop 2 ? ad /pd 0 d /sl os d /ct 0 d g flattenpath {mtp}{ltp}{ctp}{cpp}pathforall G}b
/mtp {/y1 x /x1 x /x2 x1 d /y2 y1 d /ovr FM {os /FM false d}{0}I d x1 y1 transform /cpy x /cpx x}b
/ltp 
{/x3 x1 d /y3 y1 d /y1 x /x1 x /dx x1 x3 sd /dy y1 y3 sd /di dx D * dy D ma sqrt d 
/di 0 ne
{/dsx dx di ? ovr td /dsy dy di ? ovr td x3 dsx + y3 dsy + transform
/cpy x /cpx x /pd pd di ad {sl pd le {ct sr length lt{sch}{exit}I}{/ovr sl pd sd exit}I}loop}i}b
/ctp {}b 
/cpp {x2 y2 ltp x2 y2 mtp}b 
/sch 
{/ch sr ct 1 v d /ct ct 1 ad
/cw ch W pop 2 dd 
g cpx cpy itransform T dy dx atan rotate cw neg 0 M ch SH
ct sr length lt{sr ct 1 v W pop 2 ? 0 rmoveto}i
CP transform /cpy x /cpx x G
/sl sl cw ad /po po cw 2 ma store ct sr length lt{/sl sl sr ct 1 v W pop 2 ? ad}i}b
/cpd {/newslots x D length newslots + dict D 3 1 roll begin {1 index /FID ne {def}i}forall pop pop end}b
/of 
{/ui 0 d 
/pw 1000 24 dd 
/nn x 
/bn x 
ui 0 eq 
{/ui bn findfont
dup /UniqueID known 
{/UniqueID get 1 add}{pop 1}ifelse
def} if
/bfd bn findfont def 
/ct bfd maxlength 1 ad 
bfd /UniqueID known not
{/ct ct 1 ad} if
/ofd ct dict def 
bfd
{ exch dup /FID ne
{exch ofd 3 1 roll put}
{pop pop} ifelse
}forall
ofd /FontName nn put
ofd /PaintType 2 put
ofd /StrokeWidth pw put
ofd /UniqueID ui put
nn ofd definefont pop}b
/uf 
{20 dict begin
/ui x 
e /BaseFont e findfont d
ui 0 eq 
{/ui BaseFont D /UniqueID known 
{/UniqueID get 1 +}{pop 1}I d}i
/FontType 3 d
/Upos BaseFont /FontInfo 2 copy known
{get /UnderlinePosition 2 copy known
{get}{pop pop -100 }I}{ pop pop -100 }I d
/Uwid BaseFont /FontInfo 2 copy known
{get /UnderlineThickness 2 copy known
{get}{pop pop 50}I}
{pop pop 50}I d
/FontMatrix BaseFont /FontMatrix get d
/FontBBox BaseFont /FontBBox get
D 1 get Upos gt {D 1 Upos put}i d
/Encoding BaseFont /Encoding get d
/theChar 1 string d
/BuildChar
{e begin
theChar 0 3 -1 roll put
BaseFont 1000 scalefont setfont
theChar W FontBBox setcachedevice
0 0 M
theChar show
0 Upos rmoveto 0 Upos L
Uwid setlinewidth stroke
end}d
currentdict 
end
definefont pop}b
/ns {g CP m3 currentmatrix nulldevice setmatrix T 0 0 M Txt CP pop G}b 
/ft {/ftsave save d CP 3 1 roll + e T 0 0 M /show /myshow l Txt ftsave restore}b 
/ls {/Txt x 0 ft}b 
/cs {/Txt x ns 2 ? neg ft}b 
/rs {/Txt x ns neg ft}b 
/slp {/sproc x /sr x 0 1 sr length 1 - {sr e 1 v sproc}for}b 
/ss 
{/Txt x /fsave save d
CP 2 copy T 0 0 M 
/ffsave save d pop - /lw x ns /tw x /wsp lw tw sd /nsp 0 d
/show {nsp e {sp eq {1 +}i}slp /nsp x}b 
Txt 0 nsp 0 gt {wsp nsp ? +}i ffsave restore /s+ x
/myshow load D systemdict /show get ne
{D D length 1 - get cvlit /charshadow eq {[ e aload pop e pop s+ e ] cvx}i}
{pop {s+ 0 32 4 -1 roll widthshow}}I
/show x Txt fsave restore}b
/cf{D /fn x length 7 + string /ts x ts 0 s1 V ts 7 fn V /fnm ts cvn d 
FontDirectory fnm known not {fn cvn findfont 0 cpd /nfd x nfd D /FontName fnm put /Encoding macvec put fnm nfd definefont pop}i}b
 
/JoinProcs {jp}d
/fixcoordinates {fc}d
/doarc {a}d
/doroundrect {rr}d
/dograte {dg}d
/dorgrate {drg}d
/pathoffset {po}d
/pathtext {pt}d
/dostarburst {sb}d
/dobitmap {bm}d
/strokearrow {da}d
/shadow {so}d
/charshadow {sc}d
/fountain {df}d
/offsetcalc {oc}d
/MakeOutlineFont {of}d
/MakeUnderlineFont {uf}d
/leftshow {ls}d
/rightshow {rs}d
/centershow {cs}d
/fullshow {ss}d
/coordinatefont {cf}d
 
 
%-----------------------------------
%Encode PS Fonts to match Mac Fonts
(Helvetica) coordinatefont
%-----------------------------------

%----- Begin Main Program -----%

gsave % Line
0.000 1  1  0.000 257.501 84.999  fixcoordinates
newpath
-250.501 0.000  moveto
250.501 0.000 lineto
6.000 setlinewidth 0 setgray stroke
grestore

gsave  % Text Block
0.000 1  -1  0.000 108.999 47.499  fixcoordinates
/myshow /show load def
0 setgray 
-106 25 moveto
/|______Helvetica findfont 24 scalefont setfont
{
(Software) show
} leftshow
-106 0 moveto
{
(Product) show
} leftshow
-106 -25 moveto
{
(Description) show
} leftshow
grestore

%------ End Main Program ------%

end
vmstate restore

%%Trailer

%%Pages:1


 save-pc$postscript-graphic restore

0 638.54 MO 60.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (PRODUCT NAME:) 3.60 DPJ
0 638.54 MO 146.59 0 RM 12.00 /Helvetica-Bold-DPMCS DPT
 (VAX) 25.49 DPJ 3.60 0 RM (BLISS-32) 25.49 DPJ 3.60 0 RM (Implementation) 25.49 DPJ 3.60 0 RM (Language,) 25.49 DPJ 87.59 0 RM (SPD) 25.49 DPJ 3.60 0 RM (25.12.18) 25.49 DPJ
0 624.54 MO 146.59 0 RM (Version 4.6) 4.80 DPJ
0 599.04 MO 60.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (DESCRIPTION) 4.80 DPJ
0 599.04 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 4.80 DPJ
0 599.04 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (Field references - Allow values to be retrieved from or) 3.17 DPJ
0 589.04 MO 324.37 0 RM (assigned to any contiguous field of 1 to 32 bits located) 2.85 DPJ
0 581.79 MO 60.00 0 RM (BLISS-32 is a high-level, systems implementation lan-) 5.32 DPJ
0 579.04 MO 324.37 0 RM (anywhere in the VAX virtual address space.) 3.60 DPJ
0 571.79 MO 60.00 0 RM (guage for VAX systems. BLISS-32 supports development) 3.06 DPJ
0 564.29 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.06 DPJ
0 564.29 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (Character sequence functions - Provide efficient run-) 4.09 DPJ
0 561.79 MO 60.00 0 RM (of modular software according to structured programming) 3.07 DPJ
0 554.29 MO 324.37 0 RM (time manipulation of character data. Operations in-) 5.42 DPJ
0 551.79 MO 60.00 0 RM (concepts by providing an advanced set of language fea-) 3.61 DPJ
0 544.29 MO 324.37 0 RM (clude moving, concatenating, comparing, and translat-) 3.20 DPJ
0 541.79 MO 60.00 0 RM (tures. BLISS-32 provides access to most of the hardware) 3.05 DPJ
0 534.29 MO 324.37 0 RM (ing character sequences, as well as searching for) 5.72 DPJ
0 531.79 MO 60.00 0 RM (features of the VAX systems to facilitate programming of) 3.42 DPJ
0 524.29 MO 324.37 0 RM (particular characters or substrings of characters.) 3.60 DPJ
0 521.79 MO 60.00 0 RM (real-time/hardware dependent applications.) 3.60 DPJ
0 509.54 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.60 DPJ
0 509.54 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (IF, CASE, SELECT, and SELECTONE - Allow the) 5.44 DPJ
0 504.54 MO 60.00 0 RM (BLISS-32 is intended for the development of operating) 4.69 DPJ
0 499.54 MO 324.37 0 RM (choice of an expression or group of expressions to be) 3.17 DPJ
0 494.54 MO 60.00 0 RM (systems, compilers, run-time system components, data) 4.99 DPJ
0 489.54 MO 324.37 0 RM (executed based on programmed tests.) 3.60 DPJ
0 484.54 MO 60.00 0 RM (base file systems, communications software, utilities, and) 3.15 DPJ
0 474.79 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.15 DPJ
0 474.79 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (DO, WHILE, and UNTIL - Allow general loops that) 5.07 DPJ
0 474.54 MO 60.00 0 RM (so forth, for use on a VAX hardware system.) 3.60 DPJ
0 464.79 MO 324.37 0 RM (cycle as long as a programmed test is satisfied. The) 3.89 DPJ
0 457.04 MO 60.00 0 RM (The BLISS-32 compiler runs in native mode under the) 4.67 DPJ
0 454.79 MO 324.37 0 RM (test can be made either at the beginning or the end of) 3.04 DPJ
0 447.04 MO 60.00 0 RM (VMS Operating System. It translates BLISS-32 source) 5.15 DPJ
0 444.79 MO 324.37 0 RM (the loop.) 3.60 DPJ
0 437.04 MO 60.00 0 RM (programs into relocatable object modules which can be) 4.27 DPJ
0 430.04 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 4.27 DPJ
0 430.04 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (INCR and DECR - Allow counted loops that execute a) 3.06 DPJ
0 427.04 MO 60.00 0 RM (linked for execution. BLISS-32 compiled code is opti-) 5.56 DPJ
0 420.04 MO 324.37 0 RM (computed number of times under control of a loop) 5.13 DPJ
0 417.04 MO 60.00 0 RM (mized for execution efficiency.) 3.60 DPJ
0 410.04 MO 324.37 0 RM (variable.) 3.60 DPJ
0 399.79 MO 60.00 0 RM (The following features of BLISS-32, sometimes described) 2.98 DPJ
0 395.04 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 2.98 DPJ
0 395.04 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (LEAVE - Allows both early termination of the proc-) 4.94 DPJ
0 389.79 MO 60.00 0 RM (in VAX or VMS terminology, are machine-independent) 5.15 DPJ
0 385.04 MO 324.37 0 RM (essing of a named block and continuation after the) 4.81 DPJ
0 379.79 MO 60.00 0 RM (concepts. Collectively, this set of common features is) 5.49 DPJ
0 375.04 MO 324.37 0 RM (named block. LEAVE can be considered a restricted) 4.15 DPJ
0 369.79 MO 60.00 0 RM (known as ``Common BLISS'' and can be used in a) 6.15 DPJ
0 365.04 MO 324.37 0 RM (form of forward-only GOTO since there is no general) 3.75 DPJ
0 359.79 MO 60.00 0 RM (transportable manner to develop programs for more than) 3.34 DPJ
0 355.04 MO 324.37 0 RM (GOTO in BLISS-32.) 3.60 DPJ
0 349.79 MO 60.00 0 RM (one computer architecture.) 3.60 DPJ
0 340.29 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.60 DPJ
0 340.29 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (OWN and GLOBAL - Provide static storage allocation;) 3.08 DPJ
0 332.54 MO 60.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (Common BLISS Features) 3.60 DPJ
0 330.29 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (GLOBAL names are made available to the Linker and) 3.25 DPJ
0 320.29 MO 324.37 0 RM (resolve EXTERNAL data declarations in other) 9.91 DPJ
0 313.04 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 9.91 DPJ
0 313.04 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (Modules for modularity and convenient development) 4.70 DPJ
0 310.29 MO 324.37 0 RM (modules.) 4.70 DPJ
0 303.04 MO 72.37 0 RM (are separately compiled. Object modules are relocat-) 3.92 DPJ
0 295.54 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.92 DPJ
0 295.54 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (LOCAL, STACKLOCAL, and REGISTER - Allow) 8.01 DPJ
0 293.04 MO 72.37 0 RM (able and can be linked with object modules produced) 3.50 DPJ
0 285.54 MO 324.37 0 RM (dynamic stack-like allocation using either the execu-) 4.51 DPJ
0 283.04 MO 72.37 0 RM (by the VAX MACRO assembler or other native mode) 3.69 DPJ
0 275.54 MO 324.37 0 RM (tion stack or the general registers.) 3.60 DPJ
0 273.04 MO 72.37 0 RM (languages.) 3.60 DPJ
0 260.79 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.60 DPJ
0 260.79 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (INITIAL and PRESET provide for initialization of static) 3.29 DPJ
0 255.79 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.29 DPJ
0 255.79 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (BLISS-32 provides expressions for describing the ac-) 3.75 DPJ
0 250.79 MO 324.37 0 RM (and dynamic storage.) 3.60 DPJ
0 245.79 MO 72.37 0 RM (tions to be performed and declarations for allocating,) 3.93 DPJ
0 236.04 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.93 DPJ
0 236.04 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (STRUCTURE - Allows programmed definition of ar-) 4.93 DPJ
0 235.79 MO 72.37 0 RM (describing and initializing data, defining macros and) 4.75 DPJ
0 226.04 MO 324.37 0 RM (bitrary data structures in terms of an accessing al-) 5.07 DPJ
0 225.79 MO 72.37 0 RM (literals, and so forth.) 3.60 DPJ
0 216.04 MO 324.37 0 RM (gorithm for locating elements of a structure. Built-in) 4.86 DPJ
0 208.54 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 4.86 DPJ
0 208.54 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (``Type-free'' - All data is manipulated as longwords of) 3.63 DPJ
0 206.04 MO 324.37 0 RM (declarations for VECTORs, BLOCKs, BITVECTORs,) 5.02 DPJ
0 198.54 MO 72.37 0 RM (32 bits. Interpretation of data is provided by language) 3.44 DPJ
0 196.04 MO 324.37 0 RM (and BLOCKVECTORs provide for commonly-needed) 4.51 DPJ
0 188.54 MO 72.37 0 RM (operators.) 4.51 DPJ
0 186.04 MO 324.37 0 RM (structures.) 4.51 DPJ
0 171.04 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 4.51 DPJ
0 171.04 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (Operators provide a set of operations for integer and) 3.81 DPJ
0 171.04 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.81 DPJ
0 171.04 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (ROUTINE - Provides subroutines or procedures in) 5.76 DPJ
0 161.04 MO 72.37 0 RM (floating point arithmetic, comparison, maximization) 7.01 DPJ
0 161.04 MO 324.37 0 RM (BLISS-32. Routines are recursive, re-entrant and can) 3.75 DPJ
0 151.04 MO 72.37 0 RM (and minimization of signed integer, unsigned integer) 4.42 DPJ
0 151.04 MO 324.37 0 RM (be linked in sharable images for use by multiple) 6.25 DPJ
0 141.04 MO 72.37 0 RM (and address values, and Boolean operations.) 3.60 DPJ
0 141.04 MO 324.37 0 RM (processes.) 3.60 DPJ
0 98.54 MO 479.77 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (December) 422.47 DPJ 2.70 0 RM (1989) 422.47 DPJ
0 88.54 MO 488.49 0 RM (AE-H114S-TE) 422.47 DPJ
0 78.54 MO
0 68.54 MO
0 58.54 MO
0 48.54 MO
0 38.54 MO
0 28.54 MO 60.00 0 RM %%LOGO8
 LOGO8
0 28.54 MO 0 -84.00 RM
 showpage
 restore
 save
%%Page: 2 2

0 746.54 MO 60.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (VAX) 65.73 DPJ 2.70 0 RM (BLISS-32) 65.73 DPJ 2.70 0 RM (Implementation) 65.73 DPJ 2.70 0 RM (Language,) 65.73 DPJ 252.14 0 RM (SPD) 65.73 DPJ 2.70 0 RM (25.12.18) 65.73 DPJ
0 736.54 MO 60.00 0 RM (Version 4.6) 3.60 DPJ
0 710.54 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.60 DPJ
0 710.54 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (REQUIRE - Allows source text from other files to be) 4.00 DPJ
0 710.54 MO 312.00 0 RM (As a native-mode language, BLISS-32 is integrated into) 3.98 DPJ
0 700.54 MO 72.37 0 RM (automatically included in the module being compiled.) 4.00 DPJ
0 700.54 MO 312.00 0 RM (the VAX Common Language Environment. This integra-) 4.06 DPJ
0 690.54 MO 312.00 0 RM (tion provides VAX BLISS-32 users with:) 3.60 DPJ
0 683.54 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.60 DPJ
0 683.54 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (LIBRARY - Allows special compiler-produced binary) 5.01 DPJ
0 674.79 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 5.01 DPJ
0 674.79 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (Support for VAX interlanguage calling standard) 3.60 DPJ
0 673.54 MO 72.37 0 RM (declaration files to be included in the module being) 4.69 DPJ
0 663.54 MO 72.37 0 RM (compiled. The effect is substantially the same as) 6.22 DPJ
0 658.79 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 6.22 DPJ
0 658.79 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (Access to all VMS system services) 3.60 DPJ
0 653.54 MO 72.37 0 RM (REQUIRE however, it is more efficient because a re-) 3.69 DPJ
0 643.54 MO 72.37 0 RM (stricted set of declarations can be precompiled into) 4.93 DPJ
0 642.79 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 4.93 DPJ
0 642.79 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (Access to the facilities of the VAX Symbolic Debugger) 3.07 DPJ
0 633.54 MO 72.37 0 RM (internal form.) 3.60 DPJ
0 627.04 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.60 DPJ
0 627.04 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (VAX Language-Sensitive Editor support) 3.60 DPJ
0 616.79 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.60 DPJ
0 616.79 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (MACRO and KEYWORDMACRO - Allow compile-time) 3.12 DPJ
0 611.04 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.12 DPJ
0 611.04 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (VAX Source Code Analyzer support) 3.60 DPJ
0 606.79 MO 72.37 0 RM (definition of both positional and keyword oriented) 6.59 DPJ
0 596.79 MO 72.37 0 RM (macros. Macro definition and replacement are in terms) 2.79 DPJ
0 595.04 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 2.79 DPJ
0 595.04 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (Callable interfaces to the VAX Common Run-time) 6.17 DPJ
0 586.79 MO 72.37 0 RM (of source lexical units lexemes \(atoms, tokens\) rather) 3.51 DPJ
0 585.04 MO 324.37 0 RM (Library) 3.51 DPJ
0 576.79 MO 72.37 0 RM (than character text. Macro calls and macro declara-) 4.58 DPJ
0 569.29 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 4.58 DPJ
0 569.29 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (Callable interfaces to VAX utilities such as SORT and) 3.32 DPJ
0 566.79 MO 72.37 0 RM (tions can be nested and recursive.) 3.60 DPJ
0 559.29 MO 324.37 0 RM (optional products \(for example, VAX DATATRIEVE\)) 5.21 DPJ
0 549.79 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 5.21 DPJ
0 549.79 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (%IF, %THEN, %ELSE, and %FI - Allow conditional) 4.86 DPJ
0 543.29 MO 312.00 0 RM (The BLISS-32 compiler performs global and local optimi-) 3.41 DPJ
0 539.79 MO 72.37 0 RM (compilation of BLISS source depending on pro-) 7.67 DPJ
0 533.29 MO 312.00 0 RM (zation to produce efficient and compact generated code.) 3.62 DPJ
0 529.79 MO 72.37 0 RM (grammed, compile-time tests. These can be used to) 4.29 DPJ
0 523.29 MO 312.00 0 RM (Each routine definition is treated as a complete unit in) 4.54 DPJ
0 519.79 MO 72.37 0 RM (control expansion of macros or in their own right.) 3.60 DPJ
0 513.29 MO 312.00 0 RM (compiling the code for that routine. While industry termi-) 3.68 DPJ
0 503.29 MO 312.00 0 RM (nology varies, the following generally characterizes the) 4.82 DPJ
0 502.79 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 4.82 DPJ
0 502.79 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (Lexical Functions - Allow a variety of compile-time op-) 3.13 DPJ
0 493.29 MO 312.00 0 RM (optimizations employed: common subexpression elimina-) 3.48 DPJ
0 492.79 MO 72.37 0 RM (erations such as concatenation of strings, construction) 3.00 DPJ
0 483.29 MO 312.00 0 RM (tion, removal of loop invariants, constant folding, block) 4.77 DPJ
0 482.79 MO 72.37 0 RM (of names, testing properties of macro parameters,) 5.92 DPJ
0 473.29 MO 312.00 0 RM (register allocation, peephole replacement, test instruction) 3.38 DPJ
0 472.79 MO 72.37 0 RM (testing compiler qualifiers, generating compiler diag-) 4.81 DPJ
0 463.29 MO 312.00 0 RM (elimination, jump verses branch instruction resolution,) 6.08 DPJ
0 462.79 MO 72.37 0 RM (nostic messages, and controlling macro expansion.) 3.60 DPJ
0 453.29 MO 312.00 0 RM (branch chaining, and cross-jumping.) 3.60 DPJ
0 446.04 MO 60.00 0 RM (The following features of BLISS-32 are specialized for) 4.98 DPJ
0 437.29 MO 312.00 0 RM (The compiler will optionally check for certain language) 4.84 DPJ
0 436.04 MO 60.00 0 RM (use on VAX systems. These features provide a precise) 4.11 DPJ
0 427.29 MO 312.00 0 RM (usage that, while technically correct, may be a coding) 4.86 DPJ
0 426.04 MO 60.00 0 RM (means to tailor BLISS-32 programs to the special capa-) 3.86 DPJ
0 417.29 MO 312.00 0 RM (error.) 3.86 DPJ
0 416.04 MO 60.00 0 RM (bilities of the VAX and VMS environment.) 3.60 DPJ
0 401.29 MO 312.00 0 RM (The BLISS-32 compiler optionally produces a listing file) 4.20 DPJ
0 397.54 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 4.20 DPJ
0 397.54 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (LINKAGE - Allows definition of specialized calling se-) 3.65 DPJ
0 391.29 MO 312.00 0 RM (that shows the source text compiled and the generated) 4.17 DPJ
0 387.54 MO 72.37 0 RM (quences for time critical or unusual applications.) 7.17 DPJ
0 381.29 MO 312.00 0 RM (code in a format that closely resembles a VAX MACRO) 3.82 DPJ
0 377.54 MO 72.37 0 RM (Options allow for: use of CALLS/CALLG/RET or JSB/) 3.58 DPJ
0 371.29 MO 312.00 0 RM (assembly listing. Multiple listing options allow selective) 4.99 DPJ
0 367.54 MO 72.37 0 RM (BSB/RSB type call and return instructions, for passing) 3.15 DPJ
0 361.29 MO 312.00 0 RM (inclusion or exclusion of source generated code, use of) 4.05 DPJ
0 357.54 MO 72.37 0 RM (parameters in VAX general registers or in parameter) 4.08 DPJ
0 351.29 MO 312.00 0 RM (source names in the listing in place of machine register) 3.93 DPJ
0 347.54 MO 72.37 0 RM (blocks, controlling the preservation and use of regis-) 4.15 DPJ
0 341.29 MO 312.00 0 RM (names \(where feasible\), macro expansion and tracing in-) 3.27 DPJ
0 337.54 MO 72.37 0 RM (ters by a routine, and the sharing of registers across a) 2.95 DPJ
0 331.29 MO 312.00 0 RM (formation, and use of names from library files.) 3.60 DPJ
0 327.54 MO 72.37 0 RM (set of routines as high-speed, common storage. Built-) 3.43 DPJ
0 317.54 MO 72.37 0 RM (in linkage declarations for BLISS and FORTRAN fully) 3.58 DPJ
0 315.54 MO 312.00 0 RM (A detailed symbol cross-reference is optionally included) 4.24 DPJ
0 307.54 MO 72.37 0 RM (support the VAX calling sequence conventions.) 3.60 DPJ
0 305.54 MO 312.00 0 RM (in the listing.) 3.60 DPJ
0 290.79 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.60 DPJ
0 290.79 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (PSECT - Allows use of link-time program sections for) 3.51 DPJ
0 289.54 MO 312.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (HARDWARE REQUIREMENTS) 3.60 DPJ
0 280.79 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (efficient use of the virtual address space. By default,) 3.94 DPJ
0 273.54 MO 312.00 0 RM (VAX, MicroVAX or VAXstation configuration as specified) 3.73 DPJ
0 270.79 MO 72.37 0 RM (generated code sections are position independent.) 3.60 DPJ
0 263.54 MO 312.00 0 RM (in the System Support Addendum \(SSA 25.12.18-x\).) 3.60 DPJ
0 253.79 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.60 DPJ
0 253.79 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (BUILTIN - Allows use of VAX machine-specific func-) 4.15 DPJ
0 247.54 MO 312.00 0 RM (BLISS-32 compiler performance varies with the virtual) 5.40 DPJ
0 243.79 MO 72.37 0 RM (tions for access to VAX features not otherwise pro-) 4.63 DPJ
0 237.54 MO 312.00 0 RM (memory working set for which it is allowed. In typical:) 3.60 DPJ
0 233.79 MO 72.37 0 RM (vided by the BLISS-32 language. Machine-specific) 6.20 DPJ
0 223.79 MO 72.37 0 RM (functions generally correspond to VAX-11 instructions) 3.61 DPJ
0 221.79 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.61 DPJ
0 221.79 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (With large-scale compilation of complex programs, a) 4.26 DPJ
0 213.79 MO 72.37 0 RM (such as: ADAWI, BISPSW, CRC, HALT, INDEX,) 6.93 DPJ
0 211.79 MO 324.37 0 RM (working set allocation of over 400 pages \(200K bytes\)) 3.19 DPJ
0 203.79 MO 72.37 0 RM (MTPR, PROBER, REMQUE, and so forth. Over 80) 4.94 DPJ
0 201.79 MO 324.37 0 RM (can be desirable for efficient system utilization.) 3.60 DPJ
0 193.79 MO 72.37 0 RM (such functions are provided.) 3.60 DPJ
0 185.79 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.60 DPJ
0 185.79 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (In an environment where only a single BLISS compila-) 2.94 DPJ
0 176.79 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 2.94 DPJ
0 176.79 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (ENABLE, together with SIGNAL, SIGNAL__STOP,) 6.76 DPJ
0 175.79 MO 324.37 0 RM (tion occurs at any time, a system configuration of two) 3.39 DPJ
0 166.79 MO 72.37 0 RM (and SETUNWIND functions - allow use of the VMS) 4.57 DPJ
0 165.79 MO 324.37 0 RM (megabytes of memory is required.) 3.60 DPJ
0 156.79 MO 72.37 0 RM (condition handling and error message reporting) 8.71 DPJ
0 149.79 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 8.71 DPJ
0 149.79 MO 324.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (In a multi-user environment, where several concurrent) 3.26 DPJ
0 146.79 MO 72.37 0 RM (mechanisms.) 3.26 DPJ
0 139.79 MO 324.37 0 RM (compilations occur, a minimum of two megabytes is) 4.51 DPJ
0 129.79 MO
0 129.79 MO 324.37 0 RM (recommended per simultaneous compilation.) 3.60 DPJ
0 26.54 MO 296.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (2) 3.60 DPJ
 showpage
 restore
 save
%%Page: 3 3

0 746.54 MO 60.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (VAX) 65.73 DPJ 2.70 0 RM (BLISS-32) 65.73 DPJ 2.70 0 RM (Implementation) 65.73 DPJ 2.70 0 RM (Language,) 65.73 DPJ 252.13 0 RM (SPD) 65.73 DPJ 2.70 0 RM (25.12.18) 65.73 DPJ
0 736.54 MO 60.00 0 RM (Version 4.6) 3.60 DPJ
0 710.54 MO 60.00 0 RM (SOFTWARE REQUIREMENTS) 3.60 DPJ 9.00 /Helvetica-DPMCS DPT
 (*) 3.60 DPJ
0 710.54 MO 312.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (SOFTWARE LICENSING) 3.60 DPJ
0 694.79 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (This software is furnished under the licensing provisions) 3.77 DPJ
0 694.54 MO 60.00 0 RM (For systems using terminals: \(No DECwindows interface\)) 3.24 DPJ
0 684.79 MO 312.00 0 RM (of Digital Equipment Corporation's Standard Terms and) 4.32 DPJ
0 678.54 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 4.32 DPJ
0 678.54 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (VMS Operating System) 3.60 DPJ
0 674.79 MO 312.00 0 RM (Conditions.) 3.60 DPJ
0 662.54 MO 60.00 0 RM (For workstations running VWS:) 3.60 DPJ
0 659.04 MO 312.00 0 RM (For more information about Digital's licensing terms and) 3.85 DPJ
0 649.04 MO 312.00 0 RM (policies, contact your local Digital office.) 3.60 DPJ
0 646.54 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.60 DPJ
0 646.54 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (VMS Operating System) 3.60 DPJ
0 633.04 MO 312.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (LICENSE MANAGEMENT FACILITY SUPPORT) 3.60 DPJ
0 630.54 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (\223) 3.60 DPJ
0 630.54 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (VMS Workstation Software) 3.60 DPJ
0 617.29 MO 312.00 0 RM (This layered product supports the VMS License) 9.65 DPJ
0 614.54 MO 60.00 0 RM (For workstations running DECwindows:) 3.60 DPJ
0 607.29 MO 312.00 0 RM (Management Facility. License units for this product are) 4.49 DPJ
0 598.54 MO 60.00 0 RM (VMS Operating System \(and necessary components of) 4.57 DPJ
0 597.29 MO 312.00 0 RM (allocated on a CPU-capacity basis.) 3.60 DPJ
0 588.54 MO 60.00 0 RM (VMS DECwindows\)) 3.60 DPJ
0 581.54 MO 312.00 0 RM (For more information on the License Management) 7.90 DPJ
0 572.54 MO 60.00 0 RM (*) 7.90 DPJ
0 572.54 MO 72.37 0 RM (Refer to the System Support Addendum \(SSA) 8.59 DPJ
0 571.54 MO 312.00 0 RM (Facility, refer to the VMS Operating System Software) 5.49 DPJ
0 562.54 MO 72.37 0 RM (25.12.18-x\) for availability and required versions of) 5.51 DPJ
0 561.54 MO 312.00 0 RM (Product Description \(SPD 25.01.xx\) or the License) 7.65 DPJ
0 552.54 MO 72.37 0 RM (prerequisite/optional software and for information re-) 4.71 DPJ
0 551.54 MO 312.00 0 RM (Management Facility manual of the VMS Operating) 7.15 DPJ
0 542.54 MO 72.37 0 RM (garding components of VMS DECwindows.) 3.60 DPJ
0 541.54 MO 312.00 0 RM (System documentation set.) 3.60 DPJ
0 526.54 MO 60.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (ORDERING INFORMATION) 3.60 DPJ
0 525.54 MO 312.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (For more information about Digital's licensing terms and) 3.85 DPJ
0 515.54 MO 312.00 0 RM (policies, contact your local Digital office.) 3.60 DPJ
0 510.54 MO 60.00 0 RM (Software Licenses: QL-106A*-**) 3.60 DPJ
0 500.54 MO 60.00 0 RM (Software Media: QA-106A*-**) 3.60 DPJ
0 499.79 MO 312.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (SOFTWARE PRODUCT SERVICES) 3.60 DPJ
0 490.54 MO 60.00 0 RM 9.00 /Helvetica-DPMCS DPT
 (Software Documentation: QA-106AA-GZ) 3.60 DPJ
0 484.04 MO 312.00 0 RM (A variety of service options are available. For more infor-) 3.21 DPJ
0 480.54 MO 60.00 0 RM (Software Product Services: QT-106A*-**) 3.60 DPJ
0 474.04 MO 312.00 0 RM (mation on these or other services, please contact your) 4.49 DPJ
0 464.54 MO 60.00 0 RM (*) 4.49 DPJ
0 464.54 MO 72.37 0 RM (Denotes variant fields. For additional information on) 4.84 DPJ
0 464.04 MO 312.00 0 RM (local Digital office.) 3.60 DPJ
0 454.54 MO 72.37 0 RM (available licenses, services and media, refer to the) 5.08 DPJ
0 448.04 MO 312.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (SOFTWARE WARRANTY) 3.60 DPJ
0 444.54 MO 72.37 0 RM 9.00 /Helvetica-DPMCS DPT
 (appropriate price book.) 3.60 DPJ
0 432.29 MO 312.00 0 RM (Warranty for this software product is provided by Digital) 3.93 DPJ
0 428.54 MO
0 422.29 MO 312.00 0 RM (with the purchase of a license for the product as defined) 3.39 DPJ
0 412.54 MO
0 412.29 MO 312.00 0 RM (in the Software Warranty Addendum of this SPD.) 3.60 DPJ
0 398.29 MO 60.00 0 RM 7.00 /Helvetica-DPMCS DPT
 (__________________) 3.60 DPJ
0 384.29 MO 0 4.00 RM 0 -4.00 RM
0 384.29 MO 72.00 0 RM (The DIGITAL Logo is a registered trademark of Digital Equipment Corporation.) 2.80 DPJ
0 376.29 MO 72.00 0 RM (DECwindows, MicroVAX, VMS, VAX, VAXstation, and VAXserver are trademarks of Digital Equipment Corporation.) 2.80 DPJ
0 26.54 MO 296.00 0 RM 9.00 /Helvetica-Bold-DPMCS DPT
 (3) 2.80 DPJ 0 -36.00 RM
 showpage
 restore
%%Trailer
%%Pages: 3
%%DocumentFonts: Courier-MCS %LOGO8 Helvetica-DPMCS Helvetica-Bold-DPMCS 
%!Font Name                     Font No   Charset
%!/Courier-MCS                  1         ASCII
%!%%LOGO8                       108       ASCII
%!/Helvetica-DPMCS              200       ASCII
%!/Helvetica-Bold-DPMCS         220       ASCII
%!/Helvetica-DPMCS              200       PUBL
