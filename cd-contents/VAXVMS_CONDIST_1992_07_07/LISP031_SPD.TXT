Product Name:  VAX LISP/VMS, Version 3.1			SPD 25.82.09

DESCRIPTION

VAX LISP/VMS is a complete and extended implementation of COMMON LISP as 
defined by the book, COMMON LISP: The Language, by Guy L. Steele, Jr. It runs 
on the VAX family of computers using the VMS Operating System. For 
workstations, VAX LISP/VMS supports both DECwindows (XUI toolkit and X11 
graphics) and VWS graphics.

LISP is a general purpose programming language that was developed at MIT in the 
late 1950s.  It is well suited for symbolic representation to process 
relationships  between  data and for advanced software development. COMMON 
LISP: The Language, by Guy L.  Steele, Jr., Digital Press, 1984, is the 
standard reference for the language specification.

The ANSI X3J13 committee is working on a proposal for the Common LISP ANSI 
standard.  The committee is comprised of individuals and institutions involved 
with LISP programming and artificial intelligence research. The committee's 
goals are to standardize and stabilize the LISP programming language and to 
maintain maximum compatibility with existing Common LISP implementations. 
Digital Equipment Corporation participates on the ANSI X3J13 committee.

COMMON LISP Features

Programmer Productivity

oo   Fully interactive user interface

oo   Built-in dynamic storage management

oo   Full lexically-scoped variables so compiled and interpreted code 
    execute identically; lexical closures

oo   Incremental compilation

oo   Dynamic linking so any mixture of compiled and interpreted code can 
    run.  Partial programs can run as long as no procedures are invoked 
    nor data structures referred to that are not yet defined.

F
TM X Window System is a trademark of the Massachusetts Institute of 
Technology
F

Data Structures and Manipulation

oo   Powerful facilities for macros, structures and packages

oo   Built-in facilities for manipulating lists, other data types and 
    symbolic names

oo   Minimal syntax and a standard internal representation of programs as 
    data

oo   Many types of numbers with a large set of generic operations

oo   Arrays, vectors and strings with a large set of generic operations

oo   Bit and field manipulation on both integers and arrays of bits

oo   Dynamic non-local exits with catch and throw

oo   Built-in hash table facility

oo   User-defined data types

oo   Stream-based I/O with a relatively implementation-independent 
    interface

oo   Pathnames for relative implementation-independent file name 
    manipulation

VAX LISP/VMS Features and Special Extensions

oo   Integration with the VAX computing environment

    -  Call-out to non-LISP routines conforming to the VMS calling 
       standard. The  non-LISP routines must be linked into 
       position-independent shareable images.

    -  Call-back from a LISP function calling out to a non-LISP routine 
       (conforming to the VMS calling standard); subsequently, the 
       non-LISP routine calls back to an entry point in the LISP 
       process.
 
    The following restrictions apply:

    -  Call-back is not allowed at AST level

    -  Arrays must be allocated in static space if they are passed out 
       and there might be a call-back

oo   Alien structure mechanism for defining and manipulating non-LISP 
    data structures

oo   VMS debugger support for shareable images

oo   Access to VMS run-time libraries and operating system services
 
 


Development Environment Components for Workstations and Terminals

oo   Extensible LISP-sensitive editor which provides:

    -  Parenthesis balancing

    -  Line indentation

    -  Selection and evaluation of LISP forms

    -  Multiple buffer display capabilities

oo   Symbolic debugging facilities (debugger, stepper, tracer)

oo   LISP Listener

oo   User-controllable and extensible pretty printer

oo   Window I/O streams, with input editing and command recall

oo   User-definable I/O streams

oo   User-controllable error handling

System Building Utility (patent pending) so users can:

oo   Create a LISP program excluding those parts of VAX LISP which are 
    not required for the program to execute

oo   Create a single executable image which contains both VAX LISP code 
    necessary for the program to execute and user VAX LISP code

oo   Make programs shareable by multiple users

In addition to the above capabilities, VAX LISP/VMS supports the 
following features for workstations running VMS Operating System with 
VMS DECwindows:

oo   DECwindows-based Inspector for inspecting and modifying the static 
    structure of LISP objects 

oo   DECwindows-based LISP listener with multi-line command recall, 
    multi-page transcript, object sensitivity and menu-based operations

oo   DECwindows-based editor, debugger, stepper, and tracer

oo   CLX programming interface to X11 graphics

oo   VAX LISP package to access XUI toolkit

oo   Drawing of points, lines, polygons, ellipses, circles, bitmaps, fill 
    patterns, and text in different fonts

oo   Manipulation of the color map for GPX hardware

oo   Access to the keyboard and mouse

Run-time Support for VAX LISP/VMS Applications

Through the use of the System Building Utility, VAX LISP/VMS can create 
execute-only programs which do not support VAX LISP/VMS program 
development.  These execute-only images, with the following program 
development components removed, can be copied and run on VAX systems 
without requiring VAX LISP/VMS development licenses:

oo   COMPILE-FILE function

oo   Editor

oo   Debugging facilities: debugger, inspector, trace, step, dribble, 
    room, disassemble, and time

oo   VMS debugger support

oo   Suspend function

oo   READ-EVAL-PRINT loop

oo   System Building Utility

oo   Documentation facilities: describe, apropos, and apropos-list

HARDWARE REQUIREMENTS

VAX, MicroVAX, VAXstation or VAXserver configuration as specified in the  
System Support Addendum (SSA 25.82.09-x).

SOFTWARE REQUIREMENTS*

For Systems using Terminals (No DECwindows interface):

VMS Operating System

For Workstations running VMS Workstation Software (No DECwindows 
Interface)

VMS Operating System
VMS Workstation Software

For Workstations running VMS DECwindows:

VMS Operating System (and the necessary components of VMS DECwindows)

*   Refer to the System Support Addendum (SSA 25.82.09-x) for 
    availability and required versions of prerequisite software and for 
    information regarding the necessary components of VMS DECwindows.

ORDERING INFORMATION

Software Licenses: QL-917A*-**
Software Media: QA-917A*-**
Software Documentation: QA-917AA-GZ
Software Product Services: QT-917A*-**

*   Denotes variant fields.  For additional information on available 
    licenses, services and media, refer to the appropriate price book.

SOFTWARE LICENSING

This software is furnished under the licensing provisions of Digital 
Equipment Corporation's Standard Terms and Conditions. For more 
information about Digital's licensing terms and policies, contact  your 
local Digital office.

LICENSE MANAGEMENT FACILITY SUPPORT

This layered product supports the VMS License Management Facility.

License units for this product are allocated on a CPU-capacity basis.

For more information on the License Management Facility, refer to the 
VMS Operating System Software Product Description (SPD 25.01.xx) or the 
License Management Facility manual of the VMS Operating System 
documentation set.

SOFTWARE PRODUCT SERVICES

A variety of service options is available from Digital.  For more 
information, contact your local Digital office.

SOFTWARE WARRANTY

Warranty for this software product is provided by Digital with the 
purchase of a license for the product as defined in the Software 
Warranty Addendum of this SPD.


April 1990
AE-CK96J-TE

(R) The DIGITAL Logo is a registered trademark of Digital Equipment 
Corporation.

(TM)   VAX, VMS, MicroVAX, VAXstation, VAXserver, VAXcluster, DECwindows, 
ULTRIX, ULTRIX-32, VAX LISP, VAX LISP/VMS, VAX LISP/ULTRIX, Ethernet, 
XUI and TK50 are trademarks of Digital Equipment Corporation.
