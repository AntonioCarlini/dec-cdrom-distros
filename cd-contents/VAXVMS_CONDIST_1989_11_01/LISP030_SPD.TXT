PRODUCT NAME:  VAX LISP/VMS, Version 3.0           SPD 25.82.08

DESCRIPTION

VAX LISP/VMS is a complete and extended implementation of COMMON LISP as 
defined by the book COMMON LISP: The Language, by Guy L. Steele, Jr.  
It runs on the VAX family of computers using the VMS Operating System.   
For workstations, VAX LISP/VMS supports both DECwindows (XUI toolkit 
and X11 graphics) and VWS graphics.

LISP is a general purpose programming language that was developed at MIT in the 
late 1950s.  It is well suited for symbolic representation, for processing 
relationships between data and for advanced software development. COMMON LISP: 
The Language, by Guy L. Steele, Jr., Digital Press, 1984, is the standard 
reference for the language specification.

The ANSI X3J13 committee is working on a proposal for the Common LISP ANSI 
standard.  The committee is comprised of individuals and institutions involved 
with LISP programming and artificial intelligence research.  The committee's 
goals are to standardize and stabilize the LISP programming language and to 
maintain maximum  compatibility with existing Common LISP implementations.  
DIGITAL participates on the ANSI X3J13 committee.

COMMON LISP Features

Programmer Productivity

^ Fully interactive user interface

^ Built-in dynamic storage management

^ Fully lexically scoped variables so compiled and interpreted code 
  execute identically; lexical closures

^ Incremental compilation

^ Dynamic linking so any mixture of compiled and interpreted code can 
  run. Partial programs can run as long as no procedures are invoked nor 
  data structures referred to that are not yet defined. 

Data Structures and Manipulation

^ Powerful facilities for macros, structures, and packages

^ Built-in facilities for manipulating lists, other data types, and 
  symbolic names

^ Minimal syntax and a standard internal representation of programs as 
  data

^ Many types of numbers with a large set of generic operations 

^ Arrays, vectors and strings with a large set of generic operations 

^ Bit and field manipulation on both integers and arrays of bits

^ Dynamic non-local exits with catch and throw

^ Built-in hash table facility

^ User-defined data types

^ Stream-based I/O with a relatively implementation-independent interface

^ Pathnames for relatively implementation-independent file name 
  manipulation

VAX LISP/VMS Features and Special Extensions

^ Integration with the VAX computing environment 

   - Call-out to non-LISP routines conforming to the VMS calling 
     standard.  The non-LISP routines must be linked into  
     position-independent shareable images. 

   - Call-back from a LISP function calling out to a non-LISP routine  
     (conforming to the VMS calling standard); subsequently, the non-LISP 
     routine calls back to an entry point in the LISP process. 
  
   The following restrictions apply: 

   - Call-back is not allowed at AST level 

   - Arrays must be allocated in static space if they are passed out and   
     there might be a call-back

^ Alien structure mechanism for defining and manipulating non-LISP data 
  structures 

^ VMS debugger support for shareable images 

^ Access to VMS run-time libraries and operating system services 

Development Environment Components for Workstations and Terminals

^ Extensible LISP-sensitive editor which provides: 

    - Parenthesis balancing      

    - Line indentation 

    - Selection and evaluation of LISP forms 

    - Multiple buffer display capabilities 

^ Symbolic debugging facilities (debugger, stepper, tracer) 

^ LISP Listener

^ User-controllable and extensible pretty printer 

^ Window I/O streams, with input editing and command recall

^ User-definable I/O streams 

^ User-controllable error handling 

System Building Utility (patent pending) so users can:

^ Create a LISP program excluding those parts of VAX LISP which are not 
  required for the program to execute

^ Create a single executable image which contains both VAX LISP code 
  necessary for the program to execute and user VAX LISP code 

^ Make programs shareable by multiple users 

In addition to the above capabilities, VAX LISP/VMS supports the 
following features for workstations running VMS Operating System with VMS 
DECwindows:

^ DECwindows-based Inspector for inspecting and modifying the static 
  structure of LISP objects  

^ DECwindows-based LISP listener with multi-line command recall, 
  multi-page transcript, object sensitivity and menu-based operations

^ DECwindows-based editor, debugger, stepper, and tracer

^ CLX programming interface to X11 graphics

^ VAX LISP package to access XUI toolkit

^ Drawing  of points, lines, polygons, ellipses, circles, bitmaps, fill 
  patterns, and text in different fonts 

^ Manipulation of the color map for GPX hardware 

^ Access to the keyboard and mouse

Run-time Support for VAX LISP/VMS Applications 

Through the use of the System Building Utility, the VAX LISP/VMS product 
can create ``execute only'' programs which do not support VAX LISP/VMS 
program development. These ``execute only'' images, with the following 
program development components removed, can be copied and run on VAX 
systems without requiring VAX LISP/VMS development licenses:

^ COMPILE-FILE function

^ Editor

^ Debugging facilities: debugger, inspector, trace, step, dribble, room, 
  disassemble, and time

^ VMS debugger support

^ Suspend function
  
^ READ-EVAL-PRINT loop

^ System Building Utility

^ Documentation facilities:  describe, apropos, and apropos-list

HARDWARE REQUIREMENTS

VAX, MicroVAX or VAXstation configuration as specified in the System 
Support Addendum (SSA 25.82.08-x).

SOFTWARE REQUIREMENTS *

For Systems using Terminals: (No DECwindows interface):

VMS Operating System

For Workstations running VMS Workstation Software (No DECwindows 
Interface)

VMS Operating System 

VMS Workstation Software 

For Workstations running VMS DECwindows: 

VMS Operating System (and the necessary components of VMS DECwindows)

*   Refer to the System Support Addendum (SSA 25.82.08-x) for 
    availability and required versions of prerequisite software and for 
    information regarding the necessary components of VMS DECwindows.

ORDERING INFORMATION

Software Licenses:  QL-917A*-**
Software Media:  QA-917A*-**
Software Documentation:  QA-917AA-GZ
Software Product Services:  QT-917A*-**

* Denotes variant fields.  For additional information on available 
  licenses, services and media, refer to the appropriate price book.

SOFTWARE LICENSING

This software is furnished under the licensing provisions of DIGITAL's 
Standard Terms and Conditions.  For more information about DIGITAL's 
licensing terms and policies, contact your local DIGITAL office.

LICENSE MANAGEMENT FACILITY SUPPORT

This layered product supports the VMS License Management Facility.

License units for this product are allocated on a CPU-capacity basis.

For more information on the License Management Facility, refer to the VMS 
Operating System Software Product Description (SPD 25.01.xx) or the 
License Management Facility manual of the VMS Operating System 
documentation set.

For more information about DIGITAL's licensing terms and policies, 
contact your local DIGITAL office.

SOFTWARE PRODUCT SERVICES

A variety of service options are available from DIGITAL.  For more 
information contact your local DIGITAL office.

SOFTWARE WARRANTY
 
Warranty for this software product is provided by DIGITAL with the 
purchase of a license for the product as defined in the Software Warranty 
Addendum of this SPD.

DECwindows, ULTRIX, ULTRIX-32, VAX, VAX LISP, VAX LISP/VMS, VAX
LISP/ULTRIX VAX/VMS, VMS, and XUI are trademarks of Digital Equipment 
Corporation.

TM X Window System is a trademark of the Massachusetts Institute of
    Technology

July 1989
AE-CK96I-TE

